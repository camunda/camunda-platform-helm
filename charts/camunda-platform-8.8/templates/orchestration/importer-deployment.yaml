{{- if .Values.orchestration.importer.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestration.fullname" . }}-importer
  labels:
    {{- include "orchestration.labels" . | nindent 4 }}
  annotations:
    {{- range $key, $value := .Values.global.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "orchestration.matchLabelsImporter" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "orchestration.labelsImporter" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/orchestration/configmap-unified.yaml") . | sha256sum }}
        checksum/env-vars: {{ include (print $.Template.BasePath "/orchestration/importer-configmap-env-vars.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
        {{- include "orchestration.imagePullSecrets" . | nindent 8 }}
      initContainers:
        {{- tpl ((coalesce .Values.orchestration.initContainers .Values.orchestration.extraInitContainers) | default list | toYaml | nindent 8) $ }}
      containers:
        - name: orchestration-importer
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.orchestration) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.orchestration.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.orchestration.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.orchestration.command }}
          command: {{ toYaml .Values.orchestration.command | nindent 10 }}
          {{- else }}
          command: ["bash", "/usr/local/bin/startup.sh"]
          {{- end }}
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: {{ include "orchestration.serviceNameHeadless" . | quote }}
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VALUES_ORCHESTRATION_NODE_ID
              value: {{ sub -1 .Values.global.multiregion.regionId | quote }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_ORCHESTRATION_LICENSE_KEY"
                "config" .Values.global.license
                "plaintextKey" "key"
            ) | nindent 12 }}
            {{- if eq (include "orchestration.authEnabled" .) "true" }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_ORCHESTRATION_CLIENT_SECRET"
                "config" .Values.orchestration.security.authentication.oidc
            ) | nindent 12 }}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.orchestration.javaOpts }} -Djavax.net.ssl.trustStore=/usr/local/camunda/certificates/externaldb.jks
            {{- else }}
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.orchestration.javaOpts | quote }}
            {{- end }}
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- with .Values.orchestration.env }}
              {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
            {{- if .Values.global.documentStore.type.aws.enabled }}
            - name: AWS_ACCESS_KEY_ID
              {{- include "camundaPlatform.emitAwsDocumentStoreSecret" (dict
                  "secretType" "accessKeyId"
                  "context" .
              ) | nindent 14 }}
            - name: AWS_SECRET_ACCESS_KEY
              {{- include "camundaPlatform.emitAwsDocumentStoreSecret" (dict
                  "secretType" "secretAccessKey"
                  "context" .
              ) | nindent 14 }}
            {{- end }}
            {{- if eq (lower .Values.global.documentStore.activeStoreId) "gcp" }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ printf "%s/%s" .Values.global.documentStore.type.gcp.mountPath .Values.global.documentStore.type.gcp.fileName | quote }}
            {{- end }}
            {{/*
            Variable substitution for passwords.
            */}}
            {{- if and .Values.global.elasticsearch.external (eq (include "camundaPlatform.hasSecretConfig" (dict "config" .Values.global.elasticsearch.auth)) "true") }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_ELASTICSEARCH_PASSWORD"
                "config" .Values.global.elasticsearch.auth
            ) | nindent 12 }}
            {{- end }}
            {{- if and .Values.global.opensearch.enabled (eq (include "camundaPlatform.hasSecretConfig" (dict "config" .Values.global.opensearch.auth)) "true") }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_OPENSEARCH_PASSWORD"
                "config" .Values.global.opensearch.auth
            ) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "camundaPlatform.fullname" . }}-documentstore-env-vars
            - configMapRef:
                name: {{ include "orchestration.fullname" . }}-importer-env-vars
          {{- if .Values.orchestration.importer.envFrom }}
            {{- .Values.orchestration.importer.envFrom | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.orchestration.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ include "camundaPlatform.joinpath" (list .Values.orchestration.contextPath .Values.orchestration.startupProbe.probePath) }}
              scheme: {{ .Values.orchestration.startupProbe.scheme }}
              port: {{ .Values.orchestration.service.managementPort }}
            initialDelaySeconds: {{ .Values.orchestration.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.orchestration.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.orchestration.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.orchestration.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.orchestration.startupProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.orchestration.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ include "camundaPlatform.joinpath" (list .Values.orchestration.contextPath .Values.orchestration.readinessProbe.probePath) }}
              scheme: {{ .Values.orchestration.readinessProbe.scheme }}
              port: {{ .Values.orchestration.service.managementPort }}
            initialDelaySeconds: {{ .Values.orchestration.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.orchestration.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.orchestration.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.orchestration.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.orchestration.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.orchestration.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ include "camundaPlatform.joinpath" (list .Values.orchestration.contextPath .Values.orchestration.livenessProbe.probePath) }}
              scheme: {{ .Values.orchestration.livenessProbe.scheme }}
              port: {{ .Values.orchestration.service.managementPort }}
            initialDelaySeconds: {{ .Values.orchestration.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.orchestration.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.orchestration.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.orchestration.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.orchestration.livenessProbe.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.orchestration.resources | nindent 12 }}
          volumeMounts:
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: keystore
              mountPath: /usr/local/camunda/certificates/externaldb.jks
              subPath: externaldb.jks
            {{- end }}
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/camunda/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            {{- if .Values.orchestration.log4j2 }}
            - name: config
              mountPath: /usr/local/camunda/config/log4j2.xml
              subPath: log4j2.xml
            {{- end }}
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
            {{- range $key, $val := .Values.orchestration.extraConfiguration }}
            - name: config
              mountPath: /usr/local/camunda/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- if .Values.global.documentStore.type.gcp.enabled }}
            - name: gcp-credentials-volume
              mountPath: {{ .Values.global.documentStore.type.gcp.mountPath | default "/var/secrets/gcp" | quote }}
              readOnly: true
            {{- end }}
            {{- if .Values.orchestration.importer.extraVolumeMounts }}
            {{ .Values.orchestration.extraVolumeMounts | toYaml | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.global.elasticsearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.elasticsearch.tls.existingSecret }}
            optional: false
        {{- end }}
        {{- if .Values.global.opensearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.opensearch.tls.existingSecret }}
            optional: false
        {{- end }}
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "orchestration.fullname" . }}-configuration-unified
            defaultMode: {{ .Values.orchestration.configMap.defaultMode }}
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- if .Values.global.documentStore.type.gcp.enabled }}
        - name: gcp-credentials-volume
          secret:
            secretName: {{ .Values.global.documentStore.type.gcp.existingSecret | quote }}
            items:
              - key: {{ .Values.global.documentStore.type.gcp.credentialsKey | default "service-account.json" | quote }}
                path: {{ .Values.global.documentStore.type.gcp.fileName | default "service-account.json" | quote }}
        {{- end }}
        {{- if .Values.orchestration.importer.extraVolumes }}
          {{ .Values.orchestration.importer.extraVolumes | toYaml | nindent 8 }}
        {{- end }}
      serviceAccountName: {{ include "orchestration.serviceAccountName" . }}
      {{- if .Values.orchestration.dnsConfig }}
      dnsConfig: {{- toYaml .Values.orchestration.importer.dnsConfig | nindent 8 }}
      {{- end }}
      {{- if .Values.orchestration.dnsPolicy }}
      dnsPolicy: {{ .Values.orchestration.importer.dnsPolicy | quote }}
      {{- end }}
      {{- if .Values.orchestration.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.orchestration.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
{{- with .Values.orchestration.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
