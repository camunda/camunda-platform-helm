{{- if .Values.orchestration.migration.data.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "orchestration.fullname" . }}-migration-data
  labels: {{- include "orchestration.labelsMigration" . | nindent 4 }}
  annotations: {{- toYaml .Values.global.annotations | nindent 4 }}
spec:
  backoffLimit: {{ .Values.orchestration.migration.data.backoffLimit }}
  template:
    metadata:
      labels:
        {{- include "orchestration.labelsMigration" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/orchestration/configmap-unified.yaml") . | sha256sum }}
        checksum/env-vars: {{ include (print $.Template.BasePath "/orchestration/migration-data-configmap-env-vars.yaml") . | sha256sum }}
    spec:
      restartPolicy: OnFailure
      imagePullSecrets: {{- include "orchestration.imagePullSecrets" . | nindent 8 }}
      {{- if .Values.orchestration.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.orchestration.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: camunda-migration
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.orchestration) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.orchestration.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.orchestration.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: VALUES_ORCHESTRATION_NODE_ID
              value: "-1"
            {{/*
            Passwords for variable substitution.
            */}}
            {{- if and .Values.global.elasticsearch.external (eq (include "camundaPlatform.hasSecretConfig" (dict "config" .Values.global.elasticsearch.auth)) "true") }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_ELASTICSEARCH_PASSWORD"
                "config" .Values.global.elasticsearch.auth
            ) | nindent 12 }}
            {{- end }}
            {{- if and .Values.global.opensearch.enabled (eq (include "camundaPlatform.hasSecretConfig" (dict "config" .Values.global.opensearch.auth)) "true") }}
            {{- include "camundaPlatform.emitEnvVarFromSecretConfig" (dict
                "envName" "VALUES_OPENSEARCH_PASSWORD"
                "config" .Values.global.opensearch.auth
            ) | nindent 12 }}
            {{- end }}
            {{- with .Values.orchestration.env }}
              {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "orchestration.fullname" . }}-data-migration-env-vars
          command:
            - /usr/local/camunda/bin/data-migration
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 500Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
      {{- with .Values.orchestration.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
        {{ toYamlPretty . | nindent 8 }}
      {{- end }}
      {{- with .Values.orchestration.affinity }}
      affinity:
        {{- toYamlPretty . | nindent 8 }}
      {{- end }}
      {{- with .Values.orchestration.tolerations }}
      tolerations:
        {{ toYamlPretty . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "orchestration.fullname" . }}-configuration-unified
            defaultMode: {{ .Values.orchestration.configMap.defaultMode }}
{{- end }}
