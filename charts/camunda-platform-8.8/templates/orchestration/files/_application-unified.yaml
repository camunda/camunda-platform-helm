{{/*
This file name should start with an underscore to avoid rendering it as a template.
It is included (imported) in the ConfigMap.
*/}}
spring:
  profiles:
    active: {{ include "orchestration.enabledProfilesWithIdentity" . | quote }}

server:
  address: 0.0.0.0
  port: {{ .Values.orchestration.service.httpPort }}
  servlet:
  {{- if .Values.orchestration.contextPath }}
    context-path: {{ include "camundaPlatform.joinpath" (list .Values.orchestration.contextPath) | quote }}
  {{- end }}

management:
  server:
    address: 0.0.0.0
    port: {{ .Values.orchestration.service.managementPort }}
    base-path: {{ include "camundaPlatform.joinpath" (list .Values.orchestration.contextPath) | quote }}

camunda:
  license:
    key: "${VALUES_ORCHESTRATION_LICENSE_KEY}"

  system:
    cpu-thread-count: {{ .Values.orchestration.cpuThreadCount }}
    io-thread-count: {{ .Values.orchestration.ioThreadCount }}
    clock-controlled: false
    validate-restore-config: true
    upgrade:
      enable-version-check: true

  cluster:
    # The Node ID depends on the StatefulSet Pod's name so it cannot be templated in the StatefulSet level.
    # The value of "node-id" is calculated in the "startup.sh" file and exported as "VALUES_ORCHESTRATION_NODE_ID" env var.
    node-id: ${VALUES_ORCHESTRATION_NODE_ID}
    size: {{ .Values.orchestration.clusterSize | quote }}
    replication-factor: {{ .Values.orchestration.replicationFactor | quote }}
    partitions-count: {{ .Values.orchestration.partitionCount | quote }}

  api:
    grpc:
      address: 0.0.0.0
      port: {{ .Values.orchestration.service.grpcPort }}

  data:
    snapshot-period: {{ .Values.orchestration.data.snapshotPeriod | quote }}
    primary-storage:
      disk:
        free-space:
          processing: {{ .Values.orchestration.data.disk.freeSpace.processing | quote }}
          replication: {{ .Values.orchestration.data.disk.freeSpace.replication | quote }}
    secondary-storage:
      type: {{ include "orchestration.secondaryStorage" . | quote -}}
      {{- if .Values.global.elasticsearch.enabled }}
      elasticsearch:
        url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
        cluster-name: {{ .Values.global.elasticsearch.clusterName | quote }}
        username: {{ .Values.global.elasticsearch.auth.username | quote }}
        password: "${VALUES_ELASTICSEARCH_PASSWORD:}"
        index-prefix: {{ .Values.global.elasticsearch.prefix | quote }}
        history:
          policy-name: {{ .Values.orchestration.history.retention.policyName | quote }}
      {{- end }}
      {{- if .Values.global.opensearch.enabled }}
      opensearch:
        url: {{ include "camundaPlatform.opensearchURL" . | quote }}
        cluster-name: {{ .Values.global.opensearch.clusterName | quote }}
        username: {{ .Values.global.opensearch.auth.username | quote }}
        password: "${VALUES_OPENSEARCH_PASSWORD:}"
        index-prefix: {{ .Values.global.opensearch.prefix | quote }}
        history:
          policy-name: {{ .Values.orchestration.history.retention.policyName | quote }}
    {{- end }}

  # Security configuration - Seperated syntax.
  security:
    authentication:
    {{- if eq .Values.orchestration.security.authentication.method "oidc" }}
      oidc:
        username-claim: {{ .Values.orchestration.security.authentication.oidc.usernameClaim | quote }}
        groups-claim: {{ .Values.orchestration.security.authentication.oidc.groupsClaim | quote }}
        client-id: {{ include "orchestration.authClientId" . | quote }}
        client-secret: ${VALUES_ORCHESTRATION_CLIENT_SECRET:}
        audiences:
          - {{ include "orchestration.authClientId" . | quote }}
          - {{ .Values.global.identity.auth.orchestration.audience | quote }}
          - {{ .Values.global.identity.auth.webModeler.clientApiAudience | quote }}
          - {{ .Values.global.identity.auth.webModeler.publicApiAudience | quote }}
        {{- $redirectURIDefault := printf "http://%s:8080" (include "orchestration.fullname" .) }}
        {{- /*
          TODO: Add "camundaPlatform.authIssuerBackendUrl" when "backend-url" config is supported by the Orchestration Identity.
          For more details: https://github.com/camunda/camunda-platform-helm/issues/3952
        */}}
        issuer-uri: {{ (include "camundaPlatform.authIssuerUrl" .) | quote }}
        redirect-uri: "{{ tpl .Values.global.identity.auth.orchestration.redirectUrl $ | default $redirectURIDefault }}/sso-callback"
        authenticationRefreshInterval: {{ .Values.orchestration.security.authentication.authenticationRefreshInterval | quote }}
    {{- end }}
      method: {{ .Values.orchestration.security.authentication.method | quote }}
      unprotectedApi: {{ .Values.orchestration.security.authentication.unprotectedApi }}
    authorizations:
      enabled: {{ .Values.orchestration.security.authorizations.enabled }}
    initialization:
      {{- if eq .Values.orchestration.security.authentication.method "basic" }}
      users:
        {{- range $user := .Values.orchestration.security.initialization.users }}
        - username: {{ $user.username | quote }}
          password: {{ $user.password | quote }}
          name: {{ $user.name | quote }}
          email: {{ $user.email | quote }}
        {{- end }}
      default-roles.admin.users:
        {{- range $user := .Values.orchestration.security.initialization.users }}
        - {{ index $user "username" | quote }}
        {{- end }}
      {{- else if eq .Values.orchestration.security.authentication.method "oidc" }}
      mapping-rules:
        - mapping-rule-id: "connectors-client-mapping-rule"
          claim-name: "client_id"
          claim-value: "connectors"
        {{- range $mappingRule := .Values.orchestration.security.initialization.mappingRules }}
        - mapping-rule-id: {{ index $mappingRule "mappingRuleID" | quote }}
          claim-name: {{ index $mappingRule "claimName" | quote }}
          claim-value: {{ index $mappingRule "claimValue" | quote }}
        {{- end }}
      default-roles.connectors.mappingRules:
        - "connectors-client-mapping-rule"
      default-roles.admin.mappingRules:
        {{- range $mappingRule := .Values.orchestration.security.initialization.mappingRules }}
        - {{ index $mappingRule "mappingRuleID" | quote }}
        {{- end }}
      {{- end }}
    multiTenancy:
      checksEnabled: {{ include "orchestration.multitenancyChecksEnabled" . }}
      apiEnabled: {{ include "orchestration.multitenancyApiEnabled" . }}

  {{- if .Values.global.identity.auth.enabled }}
  identity:
    clientId: {{ include "orchestration.authClientId" . | quote }}
    audience: {{ include "orchestration.authAudience" . | quote }}
  {{- end }}

{{- if .Values.orchestration.profiles.operate -}}
  {{- "\n" }}
  #
  # Camunda Operate Configuration - Seperated syntax.
  #
  operate:
    persistentSessionsEnabled: {{ include "orchestration.persistentSessionsEnabled" . }}
    multiTenancy:
      enabled: {{ include "orchestration.multitenancyChecksEnabled" . }}
    {{- if .Values.global.identity.auth.enabled }}
    identity:
      redirectRootUrl: "{{ tpl .Values.global.identity.auth.orchestration.redirectUrl $ }}/operate"
    {{- end }}

    # Zeebe instance
    zeebe:
      # Gateway address
      gatewayAddress: {{ include "orchestration.serviceNameGatewayGRPC" . | quote }}
    {{- if .Values.orchestration.history.retention.enabled }}
    archiver:
      ilmEnabled: true
      ilmMinAgeForDeleteArchivedIndices: {{ .Values.orchestration.history.retention.minimumAge }}
    {{- end }}
{{- end -}}

{{- if .Values.orchestration.profiles.tasklist -}}
  {{- "\n" }}
  #
  # Camunda Tasklist Configuration - Seperated syntax.
  #
  tasklist:
    multiTenancy:
      enabled: {{ include "orchestration.multitenancyChecksEnabled" . }}

    {{- if .Values.global.identity.auth.enabled }}
    identity:
      redirectRootUrl: "{{ tpl .Values.global.identity.auth.orchestration.redirectUrl $ }}/tasklist"
    {{- end }}

    # Zeebe instance
    zeebe:
      # Gateway address
      gatewayAddress: {{ include "orchestration.serviceNameGatewayGRPC" . | quote }}
      restAddress: {{ include "camundaPlatform.zeebeGatewayRESTURL" . | quote }}
    {{- if .Values.orchestration.history.retention.enabled }}
    archiver:
      ilmEnabled: true
      ilmMinAgeForDeleteArchivedIndices: {{ .Values.orchestration.history.retention.minimumAge }}
    {{- end }}
{{- end -}}

{{- if .Values.orchestration.profiles.broker -}}
{{- "\n" }}
#
# Camunda Zeebe Configuration - Seperated syntax.
#
zeebe:
  host: 0.0.0.0
  log:
    level: {{ .Values.orchestration.logLevel | quote }}

  broker:
    # zeebe.broker.gateway
    gateway:
      enable: true
      multitenancy:
        enabled: {{ include "orchestration.multitenancyChecksEnabled" . }}

    # zeebe.broker.network
    network:
      {{- if gt (int .Values.global.multiregion.regions) 1 }}
      advertisedHost: "${K8S_NAME}.${K8S_SERVICE_NAME}.${K8S_NAMESPACE}.svc"
      {{- else }}
      advertisedHost: "${K8S_NAME}.${K8S_SERVICE_NAME}"
      {{- end }}
      host: 0.0.0.0
      commandApi:
        port: {{ .Values.orchestration.service.commandPort }}
      internalApi:
        port: {{ .Values.orchestration.service.internalPort }}

    # zeebe.broker.cluster
    cluster:
      initialContactPoints:
      {{- range (untilStep 0 (int .Values.orchestration.clusterSize) 1) }}
        - {{ include "orchestration.fullname" $ }}-{{ . }}.${K8S_SERVICE_NAME}:{{ $.Values.orchestration.service.internalPort }}
      {{- end }}
      clusterName: {{ tpl .Values.global.zeebeClusterName . }}

    # zeebe.broker.exporters
    exporters:
    {{- if or (and .Values.global.elasticsearch.enabled .Values.global.exporter.enabled) (and .Values.global.elasticsearch.enabled .Values.optimize.enabled) }}
      elasticsearch:
        className: "io.camunda.zeebe.exporter.ElasticsearchExporter"
        args:
          {{- if .Values.global.elasticsearch.external }}
          authentication:
            username: {{ .Values.global.elasticsearch.auth.username | quote }}
            password: "${VALUES_ELASTICSEARCH_PASSWORD:}"
          {{- end }}
          url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
          index:
            prefix: {{ .Values.global.elasticsearch.prefix | quote }}
          {{- if .Values.orchestration.retention.enabled }}
          retention:
            enabled: true
            minimumAge: {{ .Values.orchestration.retention.minimumAge | quote }}
            policyName: {{ .Values.orchestration.retention.policyName | quote }}
          {{- end }}
    {{- else if or (and .Values.global.opensearch.enabled .Values.global.exporter.enabled) (and .Values.global.opensearch.enabled .Values.optimize.enabled) }}
      opensearch:
        className: "io.camunda.zeebe.exporter.opensearch.OpensearchExporter"
        args:
          url: {{ include "camundaPlatform.opensearchURL" . | quote }}
          {{- if .Values.global.opensearch.auth.username }}
          authentication:
            username: {{ .Values.global.opensearch.auth.username | quote }}
            password: "${VALUES_OPENSEARCH_PASSWORD:}"
          {{- end }}
          {{- if .Values.global.opensearch.aws.enabled }}
          aws:
            enabled: true
          {{- end }}
          {{- if .Values.orchestration.retention.enabled }}
          retention:
            enabled: true
            minimumAge: {{ .Values.orchestration.retention.minimumAge | quote }}
            policyName: {{ .Values.orchestration.retention.policyName | quote }}
          {{- end }}
      {{- end }}
    {{- if not (eq (include "orchestration.secondaryStorage" .) "none") }}
      camundaexporter:
        className: "io.camunda.exporter.CamundaExporter"
        args:
          connect:
            type: {{ include "orchestration.secondaryStorage" . | quote }}
            url: {{ .Values.global.elasticsearch.enabled | ternary (include "camundaPlatform.elasticsearchURL" .) (include "camundaPlatform.opensearchURL" .) | quote }}
            {{- if .Values.orchestration.index.prefix }}
            indexPrefix: {{ .Values.orchestration.index.prefix | quote }}
            {{- end }}
            numberOfReplicas: {{ .Values.orchestration.index.replicas | quote }}
          {{- if or .Values.global.elasticsearch.auth.username .Values.global.opensearch.auth.username }}
            username: {{ if .Values.global.elasticsearch.auth.username }}{{ .Values.global.elasticsearch.auth.username | quote }}{{ else }}{{ .Values.global.opensearch.auth.username | quote }}{{- end }}
            password: "{{ if .Values.global.elasticsearch.auth.username }}${VALUES_ELASTICSEARCH_PASSWORD:}{{ else }}${VALUES_OPENSEARCH_PASSWORD:}{{- end }}"
          {{- end }}
          {{- if .Values.orchestration.retention.enabled }}
          retention:
            enabled: true
            minimumAge: {{ .Values.orchestration.retention.minimumAge | quote }}
            policyName: {{ .Values.orchestration.retention.policyName | quote }}
          {{- end }}
          history:
            elsRolloverDateFormat: {{ .Values.orchestration.history.elsRolloverDateFormat | quote }}
            rolloverInterval: {{ .Values.orchestration.history.rolloverInterval | quote }}
            rolloverBatchSize: {{ .Values.orchestration.history.rolloverBatchSize }}
            waitPeriodBeforeArchiving: {{ .Values.orchestration.history.waitPeriodBeforeArchiving | quote }}
            delayBetweenRuns: {{ .Values.orchestration.history.delayBetweenRuns }}
            maxDelayBetweenRuns: {{ .Values.orchestration.history.maxDelayBetweenRuns }}
          {{- if .Values.orchestration.history.retention.enabled }}
            retention:
              enabled: true
              minimumAge: {{ .Values.orchestration.history.retention.minimumAge | quote }}
              policyName: {{ .Values.orchestration.history.retention.policyName | quote }}
              usageMetricsMinimumAge: {{ .Values.orchestration.history.retention.usageMetricsMinimumAge | quote }}
              usageMetricsPolicyName: {{ .Values.orchestration.history.retention.usageMetricsPolicyName | quote }}
          {{- end }}
    {{- else -}}
      {{ " {}" }}
    {{- end }}
{{ end -}}
