{{- if .Values.core.migration.process.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "core.fullname" . }}-process-migration
  labels: {{- include "core.labels" . | nindent 4 }}
  annotations: {{- toYaml .Values.global.annotations | nindent 4 }}
spec:
  backoffLimit: {{ .Values.core.migration.process.backoffLimit }}
  template:
    metadata:
      labels:
        {{- include "core.labels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      imagePullSecrets: {{- include "core.imagePullSecrets" . | nindent 8 }}
      {{- if .Values.core.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.core.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-core
          {{- if .Values.core.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.core.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          image: curlimages/curl:8.15.0
          command:
            - sh
            - -c
            - |
              until curl -sf http://{{ include "core.fullname" . }}-gateway:{{ .Values.core.service.managementPort }}{{ include "camundaPlatform.joinpath" (list .Values.core.contextPath .Values.core.readinessProbe.probePath) }}; do
                echo "waiting for Orchestration Cluster"; sleep 5;
              done
      containers:
        - name: camunda-migration
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.core) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.core.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.core.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            {{- if and .Values.global.elasticsearch.external .Values.global.elasticsearch.auth.password -}}
            - name: VALUES_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.fullname" . }}-elasticsearch
                  key: {{ .Values.global.elasticsearch.auth.existingSecretKey }}
            {{- end }}
            {{- if and .Values.global.opensearch.enabled .Values.global.opensearch.auth.password -}}
            - name: VALUES_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.fullname" . }}-opensearch
                  key: {{ .Values.global.opensearch.auth.existingSecretKey }}
            {{- end }}
          command:
            - /usr/local/camunda/bin/process-migration
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 500Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: config
          configMap:
            name: {{ include "core.fullname" . }}-process-migration-configuration
{{- end }}
