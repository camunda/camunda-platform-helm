{{- if .Values.core.enabled -}}
kind: ConfigMap
metadata:
  name: {{ include "core.fullname" . }}-configuration
  labels:
    {{- include "core.labels" . | nindent 4 }}
apiVersion: v1
data:
  startup.sh: |
    # The Node ID depends on the Pod name so it cannot be templated in the StatefulSet level.
    export ZEEBE_BROKER_CLUSTER_NODEID="${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * {{.Values.global.multiregion.regions}} + {{.Values.global.multiregion.regionId}}]}"
    echo "export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID}"

    if [ "${ZEEBE_RESTORE}" = "true" ]; then
      exec /usr/local/camunda/bin/restore --backupId=${ZEEBE_RESTORE_FROM_BACKUP_ID}
    else
      exec /usr/local/camunda/bin/camunda
    fi   

  {{- if .Values.core.configuration }}
  application.yaml: |
    {{ .Values.core.configuration | indent 4 | trim }}
  {{- else }}
  application.yaml: |
    spring:
      servlet:
        multipart:
          max-file-size: {{ .Values.global.config.requestBodySize | quote }}
          max-request-size: {{ .Values.global.config.requestBodySize | quote }}
  {{- if eq .Values.global.security.authentication.method "oidc" }}
      profiles:
        active: "identity,tasklist,operate,broker,consolidated-auth"
    camunda.security:
      authentication:
        oidc:
          username-claim: {{ .Values.global.security.authentication.oidc.usernameClaim | quote }}
          groups-claim: {{ .Values.global.security.authentication.oidc.groupsClaim | quote }}
          client-id: {{ include "core.authClientId" . | quote }}
          client-secret: ${VALUES_CAMUNDA_CORE_CLIENT_SECRET:}
          audiences:
            - {{ include "core.authClientId" . | quote }}
            - {{ .Values.global.identity.auth.core.audience | quote }}
            - {{ .Values.global.identity.auth.webModeler.clientApiAudience | quote }}
            - {{ .Values.global.identity.auth.webModeler.publicApiAudience | quote }}
          {{- $redirectURIDefault := printf "http://%s:8080" (include "core.fullname" .) }}
          issuer-uri: {{ (include "camundaPlatform.authIssuerUrl" .) | quote }}
          redirect-uri: "{{ tpl .Values.global.identity.auth.core.redirectUrl $ | default $redirectURIDefault }}/sso-callback"
  {{- else if eq .Values.global.security.authentication.method "basic" }}
      profiles:
        active: "identity,operate,tasklist,broker,consolidated-auth"
  {{- else }}
      profiles:
        active: "operate,tasklist,broker,auth"
  {{- end }}

    management:
      server:
        port: {{ .Values.core.service.managementPort }}
        {{- if .Values.core.contextPath }}
        base-path: {{ .Values.core.contextPath | quote }}
        {{- end }}

    server:
      forward-headers-strategy: none
      address: 0.0.0.0
      port: {{ .Values.core.service.httpPort }}
      servlet:
      {{- if .Values.core.contextPath }}
        context-path: {{ .Values.core.contextPath | quote }}
      {{- end }}

    zeebe:
      host: 0.0.0.0
      log:
        level: {{ .Values.core.logLevel | quote }}

      broker:
        # zeebe.broker.gateway
        gateway:
          enable: true
          network:
            host: 0.0.0.0
            port: {{ .Values.core.service.grpcPort }}
          {{- if .Values.global.multitenancy.enabled }}
          multitenancy:
            enabled: true
          {{- end }}

        # zeebe.broker.network
        network:
          {{- if gt (int .Values.global.multiregion.regions) 1 }}
          advertisedHost: "${K8S_NAME}.${K8S_SERVICE_NAME}.${K8S_NAMESPACE}.svc"
          {{- else }}
          advertisedHost: "${K8S_NAME}.${K8S_SERVICE_NAME}"
          {{- end }}
          host: 0.0.0.0
          commandApi:
            port: {{ .Values.core.service.commandPort }}
          internalApi:
            port: {{ .Values.core.service.internalPort }}

        # zeebe.broker.cluster
        cluster:
          # The value of "nodeId" is set via the "ZEEBE_BROKER_CLUSTER_NODEID" env var.
          # As it depends on the Pod name, which cannot be templated at the installation time.
          # nodeId:
          initialContactPoints:
          {{- range (untilStep 0 (int .Values.core.clusterSize) 1) }}
            - {{ include "core.legacyName" $ }}-{{ . }}.${K8S_SERVICE_NAME}:{{$.Values.core.service.internalPort}}
          {{- end }}
          clusterSize: {{ .Values.core.clusterSize | quote }}
          replicationFactor: {{ .Values.core.replicationFactor | quote }}
          partitionsCount: {{ .Values.core.partitionCount | quote }}
          clusterName: {{ tpl .Values.global.zeebeClusterName . }}

        # zeebe.broker.data
        data:
          snapshotPeriod: {{ .Values.core.data.snapshotPeriod | quote }}
          disk:
            freeSpace:
              processing: {{ .Values.core.data.disk.freeSpace.processing | quote }}
              replication: {{ .Values.core.data.disk.freeSpace.replication | quote }}

        # zeebe.broker.threads
        threads:
          cpuThreadCount: {{ .Values.core.cpuThreadCount  | quote }}
          ioThreadCount: {{ .Values.core.ioThreadCount  | quote }}

        # zeebe.broker.exporters
        exporters:
        {{- if and (not .Values.global.elasticsearch.disableExporter) .Values.global.elasticsearch.enabled }}
          elasticsearch:
            className: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            args:
              {{- if .Values.global.elasticsearch.external }}
              authentication:
                username: {{ .Values.global.elasticsearch.auth.username | quote }}
              {{- end }}
              url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
              index:
                prefix: {{ .Values.global.elasticsearch.prefix | quote }}
              {{- if .Values.core.history.retention.enabled }}
              retention:
                enabled: true
                minimumAge: {{ .Values.core.history.retention.minimumAge | quote }}
                policyName: {{ .Values.core.history.retention.policyName | quote }}
              {{- end }}
        {{- else if .Values.global.opensearch.enabled }}
          opensearch:
            className: "io.camunda.zeebe.exporter.opensearch.OpensearchExporter"
            args:
              url: {{ include "camundaPlatform.opensearchURL" . | quote }}
              {{- if .Values.global.opensearch.auth.username }}
              authentication:
                username: {{ .Values.global.opensearch.auth.username | quote }}
              {{- end }}
              {{- if .Values.global.opensearch.aws.enabled }}
              aws:
                enabled: true
              {{- end}}
              {{- if .Values.core.history.retention.enabled }}
              retention:
                enabled: true
                minimumAge: {{ .Values.core.history.retention.minimumAge | quote }}
                policyName: {{ .Values.core.history.retention.policyName | quote }}
              {{- end }}
          {{- end }}
        {{- if or .Values.global.elasticsearch.enabled .Values.global.opensearch.enabled }}
          CamundaExporter:
            className: "io.camunda.exporter.CamundaExporter"
            args:
              connect:
                type: {{ if .Values.global.elasticsearch.enabled }}elasticsearch{{ else }}opensearch{{ end }}
                url: {{ if .Values.global.elasticsearch.enabled }}{{ include "camundaPlatform.elasticsearchURL" . | quote }}{{ else }}{{ include "camundaPlatform.opensearchURL" . | quote }}{{- end }}
                {{- if .Values.core.index.prefix }}
                indexPrefix: {{ .Values.core.index.prefix | quote }}
                {{- end }}
              {{- if or .Values.global.elasticsearch.auth.username .Values.global.opensearch.auth.username }}
                username: {{ if .Values.global.elasticsearch.auth.username }}{{ .Values.global.elasticsearch.auth.username | quote }}{{ else }}{{ .Values.global.opensearch.auth.username | quote }}{{- end }}
              {{- end }}
              history:
                elsRolloverDateFormat: {{ .Values.core.history.elsRolloverDateFormat | quote }}
                rolloverInterval: {{ .Values.core.history.rolloverInterval | quote }}
                rolloverBatchSize: {{ .Values.core.history.rolloverBatchSize }}
                waitPeriodBeforeArchiving: {{ .Values.core.history.waitPeriodBeforeArchiving | quote }}
                delayBetweenRuns: {{ .Values.core.history.delayBetweenRuns }}
                maxDelayBetweenRuns: {{ .Values.core.history.maxDelayBetweenRuns }}
              {{- if .Values.core.history.retention.enabled }}
                retention:
                  enabled: true
              {{- end }}
        {{- else -}}
          {{ " {}" }}
        {{- end }}

    camunda:
      persistent:
        sessions:
          enabled: true

      rest:
        query:
          enabled: true

      security:
        authentication:
          method: {{ .Values.global.security.authentication.method | quote }}
          unprotectedApi: {{ .Values.global.security.authentication.unprotectedApi }}
        authorizations:
          enabled: {{ .Values.global.security.authorizations.enabled }}
        initialization:
          {{- if eq .Values.global.security.authentication.method "basic" }}
          users:
            {{- range $user := .Values.global.security.initialization.users }}
            - username: {{ $user.username | quote }}
              password: {{ $user.password | quote }}
              name: {{ $user.name | quote }}
              email: {{ $user.email | quote }}
            {{- end }}
          default-roles.admin.users:
            {{- range $user := .Values.global.security.initialization.users }}
            - {{ index $user "username" | quote }}
            {{- end }}
          {{- else if eq .Values.global.security.authentication.method "oidc" }}
          mapping-rules:
            - mapping-rule-id: "connectors-client-mapping-rule"
              claim-name: "client_id"
              claim-value: "connectors"
            {{- range $mappingRule := .Values.global.security.initialization.mappingRules }}
            - mapping-rule-id: {{ index $mappingRule "mappingRuleID" | quote }}
              claim-name: {{ index $mappingRule "claimName" | quote }}
              claim-value: {{ index $mappingRule "claimValue" | quote }}
            {{- end }}
          default-roles.connectors.mappingRules:
            - "connectors-client-mapping-rule"
          default-roles.admin.mappingRules:
            {{- range $mappingRule := .Values.global.security.initialization.mappingRules }}
            - {{ index $mappingRule "mappingRuleID" | quote }}
            {{- end }}
          {{- end }}
        multiTenancy:
            enabled: {{ .Values.global.multitenancy.enabled }}

      {{- if .Values.global.identity.auth.enabled }}
      identity:
        clientId: {{ include "core.authClientId" . | quote }}
        audience: {{ include "core.authAudience" . | quote }}
      {{- end }}

      #
      # Camunda Database Configuration.
      #
      {{- if or .Values.global.elasticsearch.enabled .Values.global.opensearch.enabled }}
      database:
        type: {{ if .Values.global.elasticsearch.enabled }}elasticsearch{{ else }}opensearch{{ end }}
        {{- if .Values.global.elasticsearch.enabled }}
        # Cluster name
        clusterName: {{ .Values.global.elasticsearch.clusterName }}
        {{- end }}
        {{- if or .Values.global.elasticsearch.external .Values.global.opensearch.auth.username }}
        username: {{ if .Values.global.elasticsearch.enabled }}{{ .Values.global.elasticsearch.auth.username | quote }}{{ else }}{{ .Values.global.opensearch.auth.username | quote }}{{- end }}
        {{- end }}
        # Database full url
        url: {{ if .Values.global.elasticsearch.enabled }}{{ include "camundaPlatform.elasticsearchURL" . | quote }}{{ else }}{{ include "camundaPlatform.opensearchURL" . | quote }}{{- end }}
        {{- if .Values.core.index.prefix }}
        indexPrefix: {{ .Values.core.index.prefix | quote }}
        {{- end }}
        {{- if .Values.core.history.retention.enabled }}
        retention:
          enabled: true
          minimumAge: {{ .Values.core.history.retention.minimumAge | quote }}
          policyName: {{ .Values.core.history.retention.policyName | quote }}
        {{- end }}
      {{- end }}

      #
      # Camunda Operate Configuration.
      #
      operate:
        {{- if .Values.core.migration.identity.enabled }}
        importerEnabled: true
        {{- end }}
        persistentSessionsEnabled: true
        {{- if .Values.global.opensearch.enabled }}
        database: opensearch
        {{- end }}
        {{- if .Values.global.multitenancy.enabled }}
        multiTenancy:
          enabled: true
        {{- end }}
        {{- if .Values.global.identity.auth.enabled }}
        identity:
          redirectRootUrl: "{{ tpl .Values.global.identity.auth.core.redirectUrl $ }}/operate"
        {{- end }}

        # ELS instance to store Operate data
        {{- if .Values.global.elasticsearch.enabled }}
        elasticsearch:
          # Operate index prefix.
          {{- if .Values.core.index.prefix }}
          indexPrefix: {{ .Values.core.index.prefix | quote }}
          {{- end }}
          # Cluster name
          clusterName: {{ .Values.global.elasticsearch.clusterName }}
          {{- if .Values.global.elasticsearch.external }}
          username: {{ .Values.global.elasticsearch.auth.username | quote }}
          {{- end }}
          # Host
          host: {{ include "camundaPlatform.elasticsearchHost" . }}
          # Transport port
          port: {{ .Values.global.elasticsearch.url.port }}
          {{- if .Values.global.elasticsearch.url.host }}
          # Elasticsearch full url
          url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
          {{- end }}
        # ELS instance to export Zeebe data to
        zeebeElasticsearch:
          # Cluster name
          clusterName: {{ .Values.global.elasticsearch.clusterName }}
          # Host
          host: {{ include "camundaPlatform.elasticsearchHost" . }}
          # Transport port
          port: {{ .Values.global.elasticsearch.url.port }}
          # Index prefix, configured in Zeebe Elasticsearch exporter
          prefix: {{ .Values.global.elasticsearch.prefix | quote }}
          {{- if .Values.global.elasticsearch.url.host }}
          # Elasticsearch full url
          url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
          {{- end }}
          {{- if .Values.global.elasticsearch.external }}
          # Elasticsearch username
          username: {{ .Values.global.elasticsearch.auth.username | quote }}
          {{- end }}
        {{- end }}
        # Zeebe instance
        zeebe:
          # Gateway address
          gatewayAddress: "{{ include "core.fullname" . }}:{{ .Values.core.service.grpcPort }}"
        {{- if .Values.global.opensearch.enabled }}
        opensearch:
          {{- if .Values.core.index.prefix }}
          indexPrefix: {{ .Values.core.index.prefix | quote }}
          {{- end }}
          url: {{ include "camundaPlatform.opensearchURL" . | quote }}
          {{- if .Values.global.opensearch.aws.enabled }}
          awsEnabled: true
          {{- end }}
          {{- if .Values.global.opensearch.auth.username }}
          username: {{ .Values.global.opensearch.auth.username | quote }}
          {{- end }}
        zeebeOpensearch:
          url: {{ include "camundaPlatform.opensearchURL" . | quote }}
          {{- if .Values.global.opensearch.auth.username }}
          username: {{ .Values.global.opensearch.auth.username | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.core.history.retention.enabled }}
        archiver:
          ilmEnabled: true
          ilmMinAgeForDeleteArchivedIndices: {{ .Values.core.history.retention.minimumAge }}
        {{- end }}

      #
      # Camunda Tasklist Configuration.
      #
      tasklist:
        {{- if .Values.core.migration.identity.enabled }}
        importerEnabled: true
        {{- end }}
        {{- if .Values.global.multitenancy.enabled }}
        multiTenancy:
          enabled: true
        {{- end }}

        {{- if .Values.global.identity.auth.enabled }}
        identity:
          redirectRootUrl: "{{ tpl .Values.global.identity.auth.core.redirectUrl $ }}/tasklist"
        {{- end }}

        # Set Tasklist username and password.
        # If user with <username> does not exists it will be created.
        # Default: demo/demo
        #username:
        #password:
        {{- if .Values.global.elasticsearch.enabled }}
        # ELS instance to store Tasklist data
        elasticsearch:
          # Tasklist index prefix.
          {{- if .Values.core.index.prefix }}
          indexPrefix: {{ .Values.core.index.prefix | quote }}
          {{- end }}
          # Cluster name
          clusterName: {{ .Values.global.elasticsearch.clusterName }}
          # Host
          host: {{ include "camundaPlatform.elasticsearchHost" . }}
          # Transport port
          port: {{ .Values.global.elasticsearch.url.port }}
          {{- if .Values.global.elasticsearch.url.host }}
          # Elasticsearch full url
          url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
          {{- end }}
          {{- if .Values.global.elasticsearch.external }}
          username: {{ .Values.global.elasticsearch.auth.username | quote }}
          {{- end }}
        # ELS instance to export Zeebe data to
        zeebeElasticsearch:
          # Cluster name
          clusterName: {{ .Values.global.elasticsearch.clusterName }}
          # Host
          host: {{ include "camundaPlatform.elasticsearchHost" . }}
          # Transport port
          port: {{ .Values.global.elasticsearch.url.port }}
          # Index prefix, configured in Zeebe Elasticsearch exporter
          prefix: {{ .Values.global.elasticsearch.prefix | quote }}
          {{- if .Values.global.elasticsearch.url.host }}
          # Elasticsearch full url
          url: {{ include "camundaPlatform.elasticsearchURL" . | quote }}
          {{- end }}
          {{- if .Values.global.elasticsearch.external }}
          username: {{ .Values.global.elasticsearch.auth.username | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.global.opensearch.enabled }}
        database: opensearch
        opensearch:
          {{- if .Values.core.index.prefix }}
          indexPrefix: {{ .Values.core.index.prefix | quote }}
          {{- end }}
          url: {{ include "camundaPlatform.opensearchURL" . | quote }}
          {{- if .Values.global.opensearch.aws.enabled }}
          awsEnabled: true
          {{- end }}
          {{- if .Values.global.opensearch.auth.username }}
          username: {{ .Values.global.opensearch.auth.username | quote }}
          {{- end }}
        zeebeOpensearch:
          url: {{ include "camundaPlatform.opensearchURL" . | quote }}
          {{- if .Values.global.opensearch.auth.username }}
          username: {{ .Values.global.opensearch.auth.username | quote }}
          {{- end }}
        {{- end }}
        # Zeebe instance
        zeebe:
          # Gateway address
          gatewayAddress: {{ include "core.fullname" . }}:{{ .Values.core.service.grpcPort }}
          restAddress: {{ include "camundaPlatform.zeebeGatewayRESTURL" . | quote }}
        {{- if .Values.core.history.retention.enabled }}
        archiver:
          ilmEnabled: true
          ilmMinAgeForDeleteArchivedIndices: {{ .Values.core.history.retention.minimumAge }}
        {{- end }}

    {{- end }}

  log4j2.xml: |
  {{- if .Values.core.log4j2 }}
    {{ .Values.core.log4j2 | indent 4 | trim }}
  {{- end }}

  {{- range $key, $val := .Values.core.extraConfiguration }}
  {{ $key }}: |
    {{ $val | indent 4 | trim }}
  {{- end }}
{{- end }}
