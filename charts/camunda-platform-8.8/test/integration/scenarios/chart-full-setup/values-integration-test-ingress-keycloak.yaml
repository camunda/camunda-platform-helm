global:
  secrets:
    autoGenerated: false
  ingress:
    enabled: true
    className: nginx
    # The Ingress host will be added via CLI.
    host: "camunda.example.com"
    tls:
      enabled: true
      # A wildcard certificate will be used.
      secretName: camunda-platform
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "{{ .Values.global.ingress.host }}"
      external-dns.alpha.kubernetes.io/ttl: "60"
  identity:
    auth:
      enabled: true
      publicIssuerUrl: "https://{{ .Values.global.ingress.host }}/auth/realms/camunda-platform"
      admin:
        enabled: true
        existingSecret:
          name: "integration-test-credentials"
      webModeler:
        redirectUrl: "https://{{ .Values.global.ingress.host }}/modeler"
      console:
        redirectUrl: "https://{{ .Values.global.ingress.host }}"
        existingSecret:
          name: "integration-test-credentials"
      optimize:
        redirectUrl: "https://{{ .Values.global.ingress.host }}/optimize"
        existingSecret:
          name: "integration-test-credentials"
      ## This section will be enabled by the pre-install-upgrade.sh for backwards compatibility with alpha8 chart.
      ## TODO: Remove this section after the 8.8 release.
      ## START pre-install-upgrade.sh COMMENT
      # orchestration:
      #   redirectUrl: "https://{{ .Values.global.ingress.host }}/orchestration"
      #   existingSecret:
      #     name: "integration-test-credentials"
      # connectors:
      #   existingSecret:
      #     name: "integration-test-credentials"
      ## END pre-install-upgrade.sh COMMENT

identity:
  enabled: true
  contextPath: "/identity"
  firstUser:
    existingSecret: "integration-test-credentials"
    existingSecretKey: "identity-user-password"

identityKeycloak:
  enabled: true
  postgresql:
    auth:
      existingSecret: "integration-test-credentials"
      secretKeys:
        adminPasswordKey: "identity-keycloak-postgresql-admin-password"
        userPasswordKey: "identity-keycloak-postgresql-user-password"
  auth:
    existingSecret: "integration-test-credentials"
    passwordSecretKey: "identity-keycloak-admin-password"

optimize:
  enabled: true
  contextPath: "/optimize"

connectors:
  contextPath: "/connectors"
  security:
    authentication:
      method: oidc
      oidc:
        existingSecret:
          name: "integration-test-credentials"

webModeler:
  enabled: true
  contextPath: "/modeler"
  security:
    authentication:
      method: oidc
  image:
    pullSecrets:
      - name: index-docker-io
      - name: registry-camunda-cloud
  restapi:
    mail:
      # This value is required, otherwise the restapi pod wouldn't start.
      fromAddress: noreply@example.com

# WebModeler Database.
webModelerPostgresql:
  enabled: true
  auth:
    existingSecret: "integration-test-credentials"
    secretKeys:
      adminPasswordKey: "webmodeler-postgresql-admin-password"
      userPasswordKey: "webmodeler-postgresql-user-password"

orchestration:
  contextPath: "/orchestration"
  ingress:
    grpc:
      enabled: true
      className: nginx
      host: "grpc-{{ .Values.global.ingress.host }}"
      tls:
        enabled: true
        # A wildcard certificate will be used.
        secretName: camunda-platform-zeebe-gateway
      annotations:
        external-dns.alpha.kubernetes.io/hostname: "orchestration-{{ .Values.global.ingress.host }}"
        external-dns.alpha.kubernetes.io/ttl: "60"
  security:
    initialization:
      defaultRoles:
        admin:
          users:
            - demo
          clients:
            - venom
    authentication:
      method: oidc
      authenticationRefreshInterval: "PT30S"
      oidc:
        redirectUrl: "https://{{ .Values.global.ingress.host }}/orchestration"
        existingSecret:
          name: "integration-test-credentials"

console:
  enabled: true
  contextPath: "/"
  image:
    pullSecrets:
      - name: index-docker-io
      - name: registry-camunda-cloud

elasticsearch:
  maxUnavailable: 0

prometheusServiceMonitor:
  enabled: true
  labels:
    release: kube-prometheus-stack
