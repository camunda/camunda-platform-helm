---
# Source: camunda-platform/templates/orchestration/importer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-test-zeebe-importer
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda-platform-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: orchestration-importer
    app.kubernetes.io/version: "8.8.0-alpha8"
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda-platform-test
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: orchestration-importer
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda-platform-test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        app.kubernetes.io/component: orchestration-importer
        app.kubernetes.io/version: "8.8.0-alpha8"
      annotations:
    spec:
      imagePullSecrets:
        []
      initContainers:
        - name: elasticsearch-version-check
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          image: curlimages/curl:8.15.0
          command:
            - sh
            - -c
            - |
              version_compare() {
                local ver1="$1"
                local ver2="$2"
                
                IFS='.' read -ra v1_parts <<< "$ver1"
                IFS='.' read -ra v2_parts <<< "$ver2"
                
                # Ensure both arrays have the same length by padding with zeros
                local max_parts=3
                while [ ${#v1_parts[@]} -lt $max_parts ]; do v1_parts+=("0"); done
                while [ ${#v2_parts[@]} -lt $max_parts ]; do v2_parts+=("0"); done
                
                # Compare each part
                for i in $(seq 0 $((max_parts-1))); do
                    local part1=${v1_parts[$i]:-0}
                    local part2=${v2_parts[$i]:-0}
                    
                    if [ "$part1" -gt "$part2" ]; then
                        return 0  # ver1 > ver2
                    elif [ "$part1" -lt "$part2" ]; then
                        return 1  # ver1 < ver2
                    fi
                    # If equal, continue to next part
                done
                
                return 0  # versions are equal, so ver1 >= ver2
              }
              
              # Wait for Elasticsearch and verify version
              echo "Checking Elasticsearch version..."
              ES_URL="http://camunda-platform-test-elasticsearch:9200"
              
              until ES_RESPONSE=$(curl -sf "$ES_URL" 2>/dev/null); do
                echo "Waiting for Elasticsearch at $ES_URL"; sleep 5;
              done
              
              # Extract version from Elasticsearch response
              ES_VERSION=$(echo "$ES_RESPONSE" | grep -o '"number" *: *"[^"]*"' | cut -d'"' -f4)
              
              if [ -z "$ES_VERSION" ]; then
                echo "Error: Could not determine Elasticsearch version"
                exit 1
              fi
              
              echo "Found Elasticsearch version: $ES_VERSION"
              
              # Check if version is >= 8.18.0
              if version_compare "$ES_VERSION" "8.18.0"; then
                echo "Elasticsearch version $ES_VERSION meets minimum requirement (>= 8.18.0)"
              else
                echo "Error: Elasticsearch version $ES_VERSION is below minimum requirement (8.18.0)"
                exit 1
              fi
      containers:
        - name: orchestration-importer
          image: camunda/camunda:8.8.0-alpha8
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command: ["bash", "/usr/local/bin/startup.sh"]
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: "camunda-platform-test-zeebe"
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VALUES_ORCHESTRATION_NODE_ID
              value: "-1"
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            
            - name: VALUES_ORCHESTRATION_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-credentials
                  key: identity-orchestration-client-token
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/camunda/data -XX:ErrorFile=/usr/local/camunda/data/camunda_error%p.log -XX:+ExitOnOutOfMemoryError"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            
          envFrom:
            - configMapRef:
                name: camunda-platform-test-documentstore-env-vars
            - configMapRef:
                name: camunda-platform-test-zeebe-importer-env-vars
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 2000m
              memory: 3000Mi
            requests:
              cpu: 1000m
              memory: 1500Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/camunda/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-platform-test-zeebe-configuration-unified
            defaultMode: 492
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      serviceAccountName: camunda-platform-test-zeebe
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - zeebe-broker
              topologyKey: kubernetes.io/hostname