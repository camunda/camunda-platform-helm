{{- if .Values.core.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "core.legacyName" . }}
  labels:
    {{- include "core.labels" . | nindent 4 }}
  annotations:
    {{- range $key, $value := .Values.global.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  replicas: {{ div .Values.core.clusterSize .Values.global.multiregion.regions }}
  selector:
    matchLabels:
      {{- include "core.matchLabels" . | nindent 6 }}
  serviceName: {{ include "core.fullname" . }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "core.labels" . | nindent 8 }}
        {{- if .Values.core.podLabels }}
        {{- toYaml .Values.core.podLabels | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/core/configmap.yaml") . | sha256sum }}
        {{- range $key, $value := .Values.core.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- if .Values.core.priorityClassName }}
      priorityClassName: {{ .Values.core.priorityClassName | quote }}
      {{- end }}
      imagePullSecrets:
        {{- include "core.imagePullSecrets" . | nindent 8 }}
      initContainers:
        {{- tpl ((coalesce .Values.core.initContainers .Values.core.extraInitContainers) | default list | toYaml | nindent 8) $ }}
      containers:
        - name: core
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.core) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.core.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.core.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.core.command }}
          command: {{ toYaml .Values.core.command | nindent 10 }}
          {{- else }}
          command: ["bash", "/usr/local/bin/startup.sh"]
          {{- end }}
          env:
            - name: CAMUNDA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.licenseSecretName" . }}
                  key: {{ include "camundaPlatform.licenseSecretKey" . }}
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: {{ include "core.fullname" . }}
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.global.identity.auth.enabled }}
            - name: VALUES_CAMUNDA_CORE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "core.authClientSecretName" . }}
                  key: {{ include "core.authClientSecretKey" . }}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.core.javaOpts }} -Djavax.net.ssl.trustStore=/usr/local/camunda/certificates/externaldb.jks
            {{- else }}
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.core.javaOpts | quote }}
            {{- end }}
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- with .Values.core.env }}
              {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
            {{- if .Values.global.documentStore.type.aws.enabled }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.documentStore.type.aws.existingSecret | quote }}
                  key: {{ .Values.global.documentStore.type.aws.accessKeyIdKey | quote }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.documentStore.type.aws.existingSecret | quote }}
                  key: {{ .Values.global.documentStore.type.aws.secretAccessKeyKey | quote }}
            {{- end }}
            {{- if eq (lower .Values.global.documentStore.activeStoreId) "gcp" }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ printf "%s/%s" (default "/var/secrets/gcp" .Values.global.documentStore.type.gcp.mountPath) (default "service-account.json" .Values.global.documentStore.type.gcp.fileName) | quote }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "camundaPlatform.fullname" . }}-documentstore-env-vars
          {{- if .Values.core.envFrom }}
            {{- .Values.core.envFrom | toYaml | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.core.service.httpPort }}
              name: {{ default "http" .Values.core.service.httpName }}
            - containerPort: {{ .Values.core.service.commandPort }}
              name: {{ default "command" .Values.core.service.commandName }}
            - containerPort: {{ .Values.core.service.internalPort }}
              name: {{ default "internal" .Values.core.service.internalName }}
            - containerPort: {{ .Values.core.service.managementPort }}
              name: {{ default "management" .Values.core.service.managementName }}
            - containerPort: {{ .Values.core.service.grpcPort }}
              name: {{ default "gateway" .Values.core.service.grpcName }}

          {{- if .Values.core.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.core.contextPath }}{{ .Values.core.startupProbe.probePath }}
              scheme: {{ .Values.core.startupProbe.scheme }}
              port: {{ .Values.core.service.managementPort }}
            initialDelaySeconds: {{ .Values.core.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.core.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.core.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.core.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.core.startupProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.core.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.core.contextPath }}{{ .Values.core.readinessProbe.probePath }}
              scheme: {{ .Values.core.readinessProbe.scheme }}
              port: {{ .Values.core.service.managementPort }}
            initialDelaySeconds: {{ .Values.core.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.core.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.core.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.core.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.core.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.core.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.core.contextPath }}{{ .Values.core.livenessProbe.probePath }}
              scheme: {{ .Values.core.livenessProbe.scheme }}
              port: {{ .Values.core.service.managementPort }}
            initialDelaySeconds: {{ .Values.core.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.core.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.core.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.core.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.core.livenessProbe.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.core.resources | nindent 12 }}
          volumeMounts:
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: keystore
              mountPath: /usr/local/camunda/certificates/externaldb.jks
              subPath: externaldb.jks
            {{- end }}
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            {{- if not ( eq .Values.core.persistenceType "local" ) }}
            - name: data
              mountPath: /usr/local/camunda/data
            {{- end }}
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            {{- if .Values.core.log4j2 }}
            - name: config
              mountPath: /usr/local/camunda/config/log4j2.xml
              subPath: log4j2.xml
            {{- end }}
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
            {{- range $key, $val := .Values.core.extraConfiguration }}
            - name: config
              mountPath: /usr/local/camunda/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- if .Values.global.documentStore.type.gcp.enabled }}
            - name: gcp-credentials-volume
              mountPath: {{ .Values.global.documentStore.type.gcp.mountPath | default "/var/secrets/gcp" | quote }}
              readOnly: true
            {{- end }}
            {{- if .Values.core.extraVolumeMounts }}
            {{ .Values.core.extraVolumeMounts | toYaml | nindent 12 }}
            {{- end }}
      {{- if .Values.core.sidecars }}
      {{- .Values.core.sidecars | toYaml | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.global.elasticsearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.elasticsearch.tls.existingSecret }}
            optional: false
        {{- end }}
        {{- if .Values.global.opensearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.opensearch.tls.existingSecret }}
            optional: false
        {{- end }}
        {{- if eq .Values.core.persistenceType "memory" }}
        - name: data
          emptyDir:
            medium: "Memory"
        {{- end }}
        - name: config
          configMap:
            name: {{ include "core.fullname" . }}-configuration
            defaultMode: {{ .Values.core.configMap.defaultMode }}
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- if .Values.global.documentStore.type.gcp.enabled }}
        - name: gcp-credentials-volume
          secret:
            secretName: {{ .Values.global.documentStore.type.gcp.existingSecret | quote }}
            items:
              - key: {{ .Values.global.documentStore.type.gcp.credentialsKey | default "service-account.json" | quote }}
                path: {{ .Values.global.documentStore.type.gcp.fileName | default "service-account.json" | quote }}
        {{- end }}
        {{- if .Values.core.extraVolumes }}
          {{ .Values.core.extraVolumes | toYaml | nindent 8 }}
        {{- end }}
      serviceAccountName: {{ include "core.serviceAccountName" . }}
      {{- if .Values.core.dnsConfig }}
      dnsConfig: {{- toYaml .Values.core.dnsConfig | nindent 8 }}
      {{- end }}
      {{- if .Values.core.dnsPolicy }}
      dnsPolicy: {{ .Values.core.dnsPolicy | quote }}
      {{- end }}
      {{- if .Values.core.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.core.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
{{- with .Values.core.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
# yamllint disable
{{- with .Values.core.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
# yamllint enable
{{- with .Values.core.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}

  {{- if eq .Values.core.persistenceType "disk" }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {{- toYaml .Values.core.pvcAnnotations | nindent 10 }}
      spec:
        accessModes: {{ .Values.core.pvcAccessModes }}
        {{- if .Values.core.pvcStorageClassName }}
        {{- if (eq "-" .Values.core.pvcStorageClassName) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.core.pvcStorageClassName }}
        {{- end }}
        {{- end }}
        {{- if .Values.core.pvcSelector }}
        {{- with .Values.core.pvcSelector }}
        selector: {{ toYaml . | nindent 10 }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.core.pvcSize | quote }}
  {{- end }}
{{- end }}
