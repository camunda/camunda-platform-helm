{{- if .Values.optimize.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "optimize.fullname" . }}
  labels:
    {{- include "optimize.labels" . | nindent 4 }}
  annotations:
    {{- toYaml .Values.global.annotations | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      {{- include "optimize.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: 
        {{- include "optimize.labels" . | nindent 8 }}
        {{- if .Values.optimize.podLabels }}
        {{- toYaml .Values.optimize.podLabels | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/optimize/configmap.yaml") . | sha256sum }}
      {{- if .Values.optimize.podAnnotations }}
        {{- toYaml .Values.optimize.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      imagePullSecrets:
        {{- include "optimize.imagePullSecrets" . | nindent 8 }}
      initContainers:
        {{- if .Values.optimize.initContainers }}
          {{- tpl (.Values.optimize.initContainers | toYaml | nindent 8) $ }}
        {{- end }}
        {{- if .Values.optimize.migration.enabled }}
        - name: migration
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.optimize) }}
          command: ['./upgrade/upgrade.sh', '--skip-warning']
          {{- if .Values.optimize.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.optimize.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: CAMUNDA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.licenseSecretName" . }}
                  key: {{ include "camundaPlatform.licenseSecretKey" . }}
            {{- if and .Values.global.elasticsearch.external  (include "elasticsearch.passwordIsDefined" .) }}
            - name: CAMUNDA_OPTIMIZE_ELASTICSEARCH_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "elasticsearch.authExistingSecret" . | quote }}
                  key: {{ include "elasticsearch.authExistingSecretKey" . | quote }}
            {{- end }}
            {{- if .Values.global.opensearch.enabled }}
              {{- if eq .Values.global.opensearch.url.protocol "https" }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SSL_ENABLED
              value: "true"
              {{- end }}
            - name: CAMUNDA_OPTIMIZE_DATABASE
              value: opensearch
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_HTTP_PORT
              value: {{ .Values.global.opensearch.url.port | quote }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_HOST
              value: {{ include "camundaPlatform.opensearchHost" . | quote }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SECURITY_USERNAME
              value: {{ .Values.global.opensearch.auth.username | quote }}
            {{- if or .Values.global.opensearch.auth.existingSecret .Values.global.opensearch.auth.password }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "opensearch.authExistingSecret" . | quote }}
                  key: {{ include "opensearch.authExistingSecretKey" . | quote }}
            {{- end}}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: JAVA_TOOL_OPTIONS
              value: -Djavax.net.ssl.trustStore=/optimize/certificates/externaldb.jks
            {{- end }}
            {{- if .Values.global.elasticsearch.enabled }}
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: {{ include "camundaPlatform.elasticsearchHost" . | quote }}
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: {{ .Values.global.elasticsearch.url.port | quote }}
            {{- end }}
            {{- if .Values.global.opensearch.aws.enabled }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_AWS_ENABLED
              value: "true"
            {{- end }}
            {{- with .Values.optimize.env }}
            {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
            {{- with .Values.optimize.migration.env }}
            {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.optimize.migration.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
            - mountPath: /optimize/config/environment-config.yaml
              subPath: environment-config.yaml
              name: environment-config
            {{- if .Values.global.identity.auth.enabled }}
            - mountPath: /optimize/config/application-ccsm.yaml
              subPath: application-ccsm.yaml
              name: environment-config
            {{- end }}
            {{- range $key, $val := .Values.optimize.extraConfiguration }}
            - name: environment-config
              mountPath: /optimize/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: keystore
              mountPath: /optimize/certificates/externaldb.jks
              subPath: externaldb.jks
            {{- end }}
            {{- if .Values.optimize.extraVolumeMounts }}
            {{- .Values.optimize.extraVolumeMounts | toYaml | nindent 12 }}
            {{- end }}
        {{- end }}
      containers:
        - name: optimize
          image: {{ include "camundaPlatform.imageByParams" (dict "base" .Values.global "overlay" .Values.optimize) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.optimize.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.optimize.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: CAMUNDA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.licenseSecretName" . }}
                  key: {{ include "camundaPlatform.licenseSecretKey" . }}
            {{- if and .Values.global.elasticsearch.external  (include "elasticsearch.passwordIsDefined" .) }}
            - name: CAMUNDA_OPTIMIZE_ELASTICSEARCH_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "elasticsearch.authExistingSecret" . | quote }}
                  key: {{ include "elasticsearch.authExistingSecretKey" . | quote }}
            {{- end }}
            {{- if .Values.global.opensearch.enabled }}
              {{- if eq .Values.global.opensearch.url.protocol "https" }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SSL_ENABLED
              value: "true"
              {{- end }}
            - name: CAMUNDA_OPTIMIZE_DATABASE
              value: opensearch
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_HTTP_PORT
              value: {{ .Values.global.opensearch.url.port | quote }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_HOST
              value: {{ include "camundaPlatform.opensearchHost" . | quote }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SECURITY_USERNAME
              value: {{ .Values.global.opensearch.auth.username | quote }}
            {{- if or .Values.global.opensearch.auth.existingSecret .Values.global.opensearch.auth.password }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "opensearch.authExistingSecret" . | quote }}
                  key: {{ include "opensearch.authExistingSecretKey" . | quote }}
            {{- end}}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: JAVA_TOOL_OPTIONS
              value: -Djavax.net.ssl.trustStore=/optimize/certificates/externaldb.jks
            {{- end }}
            {{- if .Values.optimize.contextPath }}
            - name: CAMUNDA_OPTIMIZE_CONTEXT_PATH
              value: {{ .Values.optimize.contextPath | quote }}
            {{- end }}
            {{- if .Values.global.elasticsearch.enabled }}
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: {{ include "camundaPlatform.elasticsearchHost" . | quote }}
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: {{ .Values.global.elasticsearch.url.port | quote }}
            {{- end }}
            - name: SPRING_PROFILES_ACTIVE
              value: ccsm
            {{- if .Values.global.identity.auth.enabled }}
            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
              {{- if and .Values.global.identity.auth.optimize.existingSecret (not (typeIs "string" .Values.global.identity.auth.optimize.existingSecret)) }}
              valueFrom:
                secretKeyRef:
                  {{- /*
                      Helper: https://github.com/bitnami/charts/blob/master/bitnami/common/templates/_secrets.tpl
                      Usage in keycloak secrets https://github.com/bitnami/charts/blob/master/bitnami/keycloak/templates/secrets.yaml
                      and in statefulset https://github.com/bitnami/charts/blob/master/bitnami/keycloak/templates/statefulset.yaml
                  */}}
                  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.global.identity.auth.optimize.existingSecret "context" $) }}
                  key: {{ .Values.global.identity.auth.optimize.existingSecretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "camundaPlatform.identitySecretName" (dict "context" . "component" "optimize") }}
                  key: {{ .Values.global.identity.auth.optimize.existingSecretKey }}
              {{- end }}
              {{- end }}
            {{- if .Values.global.multitenancy.enabled }}
            - name: CAMUNDA_OPTIMIZE_MULTITENANCY_ENABLED
              value: "true"
            - name: CAMUNDA_OPTIMIZE_CACHES_CLOUD_TENANT_AUTHORIZATIONS_MAX_SIZE
              value: "10000"
            - name: CAMUNDA_OPTIMIZE_CACHES_CLOUD_TENANT_AUTHORIZATIONS_MIN_FETCH_INTERVAL_SECONDS
              value: "600000"
            {{- end }}
            {{- if .Values.global.opensearch.aws.enabled }}
            - name: CAMUNDA_OPTIMIZE_OPENSEARCH_AWS_ENABLED
              value: "true"
            {{- end }}
          {{- with .Values.optimize.env }}
            {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          envFrom:
          {{- if .Values.global.identity.auth.enabled }}
            - configMapRef:
                name: {{ include "camundaPlatform.fullname" . }}-identity-env-vars
          {{- end }}
          {{- if .Values.optimize.envFrom -}}
           {{ .Values.optimize.envFrom | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.optimize.command }}
          command: {{ toYaml .Values.optimize.command | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.optimize.resources | nindent 12 }}
          ports:
            - containerPort: 8090
              name: http
              protocol: TCP
            - containerPort: 8092
              name: management
              protocol: TCP
          {{- if .Values.optimize.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.optimize.contextPath }}{{ .Values.optimize.startupProbe.probePath }}
              scheme: {{ .Values.optimize.startupProbe.scheme }}
              port: http
            initialDelaySeconds: {{ .Values.optimize.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.optimize.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.optimize.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.optimize.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.optimize.startupProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.optimize.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.optimize.contextPath }}{{ .Values.optimize.readinessProbe.probePath }}
              scheme: {{ .Values.optimize.readinessProbe.scheme }}
              port: http
            initialDelaySeconds: {{ .Values.optimize.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.optimize.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.optimize.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.optimize.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.optimize.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.optimize.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.optimize.contextPath }}{{ .Values.optimize.livenessProbe.probePath }}
              scheme: {{ .Values.optimize.livenessProbe.scheme }}
              port: http
            initialDelaySeconds: {{ .Values.optimize.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.optimize.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.optimize.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.optimize.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.optimize.livenessProbe.timeoutSeconds }}
          {{- end }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
            - mountPath: /optimize/config/environment-config.yaml
              subPath: environment-config.yaml
              name: environment-config
            {{- if .Values.global.identity.auth.enabled }}
            - mountPath: /optimize/config/application-ccsm.yaml
              subPath: application-ccsm.yaml
              name: environment-config
            {{- end }}
            {{- range $key, $val := .Values.optimize.extraConfiguration }}
            - name: environment-config
              mountPath: /optimize/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- if or .Values.global.elasticsearch.tls.existingSecret .Values.global.opensearch.tls.existingSecret }}
            - name: keystore
              mountPath: /optimize/certificates/externaldb.jks
              subPath: externaldb.jks
            {{- end }}
            {{- if .Values.optimize.extraVolumeMounts }}
            {{- .Values.optimize.extraVolumeMounts | toYaml | nindent 12 }}
            {{- end }}
        {{- if .Values.optimize.sidecars }}
        {{- .Values.optimize.sidecars | toYaml | nindent 8 }}
        {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
        - name: environment-config
          configMap:
            name: {{ include "optimize.fullname" . }}-configuration
            defaultMode: {{ .Values.optimize.configMap.defaultMode }}
        {{- if .Values.global.elasticsearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.elasticsearch.tls.existingSecret }}
            optional: false
        {{- end }}
        {{- if .Values.global.opensearch.tls.existingSecret }}
        - name: keystore
          secret:
            secretName: {{ .Values.global.opensearch.tls.existingSecret }}
            optional: false
        {{- end }}
        {{- if .Values.optimize.extraVolumes }}
        {{- .Values.optimize.extraVolumes | toYaml | nindent 8 }}
        {{- end }}
      serviceAccountName: {{ include "optimize.serviceAccountName" . }}
      {{- if .Values.optimize.dnsConfig }}
      dnsConfig: {{- toYaml .Values.optimize.dnsConfig | nindent 8 }}
      {{- end }}
      {{- if .Values.optimize.dnsPolicy }}
      dnsPolicy: {{ .Values.optimize.dnsPolicy | quote }}
      {{- end }}
      {{- if .Values.optimize.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" $.Values.optimize.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
{{- with .Values.optimize.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.optimize.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.optimize.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
