version: '3'

vars:
  TEST_NAMESPACE: '{{ env "TEST_NAMESPACE" | default "camunda-platform" }}'
  TEST_CLUSTER_TYPE: '{{ env "TEST_CLUSTER_TYPE" | default "kubernetes" }}'
  TEST_HELM_EXTRA_ARGS: '{{ env "TEST_HELM_EXTRA_ARGS" }} {{ .TEST_OPENSHIFT_ARGS }}'
  TEST_CHART_VERSION: '{{ env "TEST_CHART_VERSION" | default ">0.0.0" | quote }}'

dotenv:
- ../vars/common.env
- ../vars/dynamic.env
- ../vars/{{ .TEST_CLUSTER_TYPE }}.env

includes:
  init.seed:
    taskfile: ../lib/init-seed-taskfile.yaml
    internal: true
  upgrade:
    taskfile: ../lib/chart-upgrade-taskfile.yaml
    internal: true
    vars:
      TEST_NAMESPACE: "{{ .TEST_NAMESPACE }}"
      TEST_CLUSTER_TYPE: "{{ .TEST_CLUSTER_TYPE }}"
      TEST_HELM_EXTRA_ARGS: |-
        {{ .TEST_HELM_EXTRA_ARGS }} --values {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress.yaml
  test.preflight:
    taskfile: ../lib/testsuite-deploy-taskfile.yaml
    vars:
      testID: preflight
      chartDir: "{{ .TEST_CHART_DIR }}"
  test.core:
    taskfile: ../lib/testsuite-deploy-taskfile.yaml
    vars:
      testID: core
      chartDir: "{{ .TEST_CHART_DIR }}"

tasks:
  setup.pre:
    preconditions:
    - test -n "${TEST_DOCKER_USERNAME_CAMUNDA_CLOUD}"
    - test -n "${TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD}"
    - test -n "${TEST_INGRESS_HOST}"
    env:
      VARIABLES_ENV_FILE: "{{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env"
    cmds:
    # This is needed to access WebModeler Docker image since it's not public.
    - kubectl create secret docker-registry registry-camunda-cloud
        --namespace {{ .TEST_NAMESPACE }}
        --docker-server "registry.camunda.cloud"
        --docker-username "${TEST_DOCKER_USERNAME_CAMUNDA_CLOUD}"
        --docker-password "${TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD}"
    # Set Venom vars.
    - |
      echo "VENOM_VAR_SKIP_TEST_INGRESS=false" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_VAR_TEST_INGRESS_HOST=${TEST_INGRESS_HOST}" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_VAR_SKIP_TEST_WEBMODELER=false" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_EXTRA_ARGS=--var-from-file=./vars/variables-ingress-combined.yaml" >> "${VARIABLES_ENV_FILE}"
      echo "ZEEBE_VERSION=$(yq '.zeebe.image.tag' {{ .TEST_CHART_DIR }}/values.yaml)" >> "${VARIABLES_ENV_FILE}"
      # In case the Zeebe version has not been released officially yet.
      echo "ZEEBE_VERSION_FALLBACK=$(grep zbctl ../../../../.tool-versions | cut -d " " -f 2)" >> "${VARIABLES_ENV_FILE}"
    - |
      if [[ "${TEST_CHART_FLOW}" == 'upgrade' ]]; then
        # Extract OpenShift values from released chart for upgrade test.
        helm pull {{ .TEST_CHART_NAME }} --untar --untardir {{ .TEST_TMP_DIR }} \
          --version {{ .TEST_CHART_VERSION }}
        # Preinstall in upgrade flow.
        test -f {{ .TEST_VALUES_BASE_DIR }}/pre-install-upgrade/* || {
          exit 0
        }
        export TEST_NAMESPACE={{ .TEST_NAMESPACE }}
        bash -x {{ .TEST_VALUES_BASE_DIR }}/pre-install-upgrade/*.sh
      fi
    - |
      # Create the local chart package to install.
      pwd
      helm package {{ .TEST_CHART_DIR }}/
    - |
      test -f {{ .TEST_VALUES_BASE_DIR }}/pre-install/* || {
        exit 0
      }
      export TEST_NAMESPACE={{ .TEST_NAMESPACE }}
      bash -x {{ .TEST_VALUES_BASE_DIR }}/pre-install/*.sh

  setup.exec:
    deps: [init.seed]
    cmds:
    - helm install integration {{ .TEST_CHART_NAME }}
        --version {{ .TEST_CHART_VERSION }}
        --namespace {{ .TEST_NAMESPACE }}
        --values {{ .TEST_VALUES_BASE_DIR }}/common/values-integration-test.yaml
        --values {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress.yaml
        --timeout 20m0s
        --wait
        {{ .TEST_HELM_EXTRA_ARGS }}

  setup.post:
    cmds:
    - echo "No post task for this test."

  setup.clean:
    cmds:
    - kubectl delete secret registry-camunda-cloud --ignore-not-found=true
    - git checkout {{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env

  upgrade.pre:
    deps: [upgrade:pre]

  upgrade.exec:
    deps: [upgrade:exec]

  all:
    cmds:
    - task: init.seed
    - task: setup.pre
    - task: setup.exec
    - task: setup.post
    - task: test.preflight
    - task: test.core
