version: '3'

vars:
  TEST_NAMESPACE: '{{ env "TEST_NAMESPACE" | default "camunda-platform" }}'
  TEST_CLUSTER_TYPE: '{{ env "TEST_CLUSTER_TYPE" | default "kubernetes" }}'
  TEST_HELM_EXTRA_ARGS: '{{ env "TEST_HELM_EXTRA_ARGS" }} {{ .TEST_OPENSHIFT_ARGS }}'
  TEST_CHART_VERSION: '{{ env "TEST_CHART_VERSION" | default ">0.0.0" | quote }}'
  VALUES_CONFIG: '{{ env "VALUES_CONFIG" | default "{}" }}'

dotenv:
- ../vars/common.env
- ../vars/dynamic.env
- ../vars/{{ .TEST_CLUSTER_TYPE }}.env

includes:
  init.seed:
    taskfile: ../lib/init-seed-taskfile.yaml
    internal: false
  upgrade:
    taskfile: ../lib/chart-upgrade-taskfile.yaml
    internal: true
    vars:
      TEST_NAMESPACE: "{{ .TEST_NAMESPACE }}"
      TEST_CLUSTER_TYPE: "{{ .TEST_CLUSTER_TYPE }}"
      TEST_HELM_EXTRA_ARGS: "{{ .TEST_HELM_EXTRA_ARGS }}"
  test.preflight:
    taskfile: ../lib/testsuite-deploy-taskfile.yaml
    vars:
      testID: preflight
      chartDir: "{{ .TEST_CHART_DIR }}"
  test.core:
    taskfile: ../lib/testsuite-deploy-taskfile.yaml
    vars:
      testID: core
      chartDir: "{{ .TEST_CHART_DIR }}"
  test.playwright.core:
    taskfile: ../lib/testsuite-deploy-taskfile-playwright.yaml
    vars:
      testID: playwright.core
      chartDir: "{{ .TEST_CHART_DIR }}"

tasks:
  setup.pre:
    env:
      VARIABLES_ENV_FILE: "{{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env"
    cmds:
    # Set Venom vars.
    - |
      echo "VENOM_VAR_SKIP_TEST_INGRESS=false" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_VAR_TEST_INGRESS_HOST=${TEST_INGRESS_HOST}" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_VAR_SKIP_TEST_WEBMODELER=false" >> "${VARIABLES_ENV_FILE}"
            
      # Step 1: Merge all YAMLs
      MERGED_YAML=$(yq eval-all '. as $item ireduce ({}; . * $item )' \
        "${TEST_VALUES_BASE_DIR}/common/values-integration-test.yaml" \
        "${TEST_VALUES_BASE_DIR}/chart-full-setup/values-integration-test-ingress-${TEST_VALUES_SCENARIO}.yaml" \
        "${INFRA_TYPE_VALUES}" \
        /tmp/extra-values-file.yaml)
      
      echo "--- Merged YAML ---"
      echo "$MERGED_YAML"
      echo "-------------------"
      # Step 2: Extract the Elasticsearch enabled value
      ES_ENABLED=$(echo "$MERGED_YAML" | yq '.elasticsearch.enabled // false')
      
      echo "Elasticsearch enabled: $ES_ENABLED"

      # Step 3: Determine if we should skip test
      VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$(echo "$ES_ENABLED" | yq 'not')
      
      echo "Skip Elasticsearch test: $VENOM_VAR_SKIP_TEST_ELASTICSEARCH"
      echo "VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$VENOM_VAR_SKIP_TEST_ELASTICSEARCH" >> "$VARIABLES_ENV_FILE"
      #echo "VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$(yq eval-all '. as $item ireduce ({}; . * $item )' {{ .TEST_VALUES_BASE_DIR }}/common/values-integration-test.yaml {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-{{ .TEST_VALUES_SCENARIO }}.yaml {{ env "INFRA_TYPE_VALUES" }} /tmp/extra-values-file.yaml | yq '.elasticsearch.enabled // false | not')" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_VAR_SKIP_TEST_KEYCLOAK=$( [ "$TEST_VALUES_SCENARIO" = "elasticsearch" ] && echo true || echo false )" >> "${VARIABLES_ENV_FILE}"
      echo "VENOM_EXTRA_ARGS=--var-from-file=./vars/variables-ingress-combined.yaml" >> "${VARIABLES_ENV_FILE}"
      echo "ZEEBE_VERSION=$(yq '.zeebe.image.tag' {{ .TEST_CHART_DIR }}/values.yaml)" >> "${VARIABLES_ENV_FILE}"
      # In case the Zeebe version has not been released officially yet.
      echo "ZEEBE_VERSION_FALLBACK=$(grep zbctl ../../../../.tool-versions | cut -d " " -f 2)" >> "${VARIABLES_ENV_FILE}"
      cat "${VARIABLES_ENV_FILE}"
    - |
      {{if eq (env "TEST_CHART_FLOW") "upgrade"}}
        # Extract OpenShift values from released chart for upgrade test.
        helm pull {{ .TEST_CHART_NAME }} --untar --untardir {{ .TEST_TMP_DIR }} \
          --version {{ .TEST_CHART_VERSION }}
        # Pre-run scripts in the upgrade flow.
        export TEST_NAMESPACE={{ .TEST_NAMESPACE }}
        bash -x {{ .TEST_VALUES_BASE_DIR }}/pre-run-scripts/pre-install-upgrade.sh
      {{end}}
    - |
      # Create the local chart package to install.
      pwd
      helm package {{ .TEST_CHART_DIR }}/
    - |
      # Pre-run scripts in the install flow.
      export TEST_NAMESPACE={{ .TEST_NAMESPACE }}
      bash -x {{ .TEST_VALUES_BASE_DIR }}/pre-run-scripts/pre-install.sh
    - |
      {{if eq (env "TEST_AUTH_TYPE") "oidc"}}
        # This token will expire in June 2027, a new one can be created in the Azure Entra UI
        RESPONSE=$(curl -X POST \
          https://login.microsoftonline.com/${ENTRA_PARENT_APP_DIRECTORY_ID}/oauth2/v2.0/token \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${ENTRA_PARENT_APP_CLIENT_ID}" \
          -d "scope=https://graph.microsoft.com/.default" \
          -d "client_secret=${ENTRA_PARENT_APP_CLIENT_SECRET}" \
          -d "grant_type=client_credentials")

        BEARER_TOKEN=$(echo "$RESPONSE" | jq -r ".access_token")
        # There is no way to append URIs from a single curl request so we have to first GET, append, deduplicate, then curl with the updated list.
        NEW_WEB_URIS=(
          "https://{{ .TEST_INGRESS_HOST }}"
          "https://{{ .TEST_INGRESS_HOST }}/identity/auth/login-callback"
          "https://{{ .TEST_INGRESS_HOST }}/operate/identity-callback"
          "https://{{ .TEST_INGRESS_HOST }}/optimize/api/authentication/callback"
          "https://{{ .TEST_INGRESS_HOST }}/tasklist/identity-callback"
          "https://{{ .TEST_INGRESS_HOST }}/core/sso-callback"
        )
        NEW_SPA_URIS=(
          "https://{{ .TEST_INGRESS_HOST }}/modeler/login-callback"
          "https://{{ .TEST_INGRESS_HOST }}/"
        )

        APP_JSON=$(curl -s -X GET \
          "https://graph.microsoft.com/v1.0/applications/${ENTRA_CHILD_APP_OBJECT_ID}" \
          -H "Authorization: Bearer ${BEARER_TOKEN}" \
          -H "Content-Type: application/json")

        WEB_URIS=$(echo "$APP_JSON" | jq -r '.web.redirectUris[]?')
        SPA_URIS=$(echo "$APP_JSON" | jq -r '.spa.redirectUris[]?')

        ALL_WEB_URIS=("${WEB_URIS[@]}" "${NEW_WEB_URIS[@]}")
        ALL_SPA_URIS=("${SPA_URIS[@]}" "${NEW_SPA_URIS[@]}")

        # Deduplicate using sort/uniq
        FINAL_WEB_URIS=$(printf "%s\n" "${ALL_WEB_URIS[@]}" | sort -u | jq -R . | jq -s .)
        FINAL_SPA_URIS=$(printf "%s\n" "${ALL_SPA_URIS[@]}" | sort -u | jq -R . | jq -s .)

        # print out the final URIs
        echo "web URIs:"
        echo $FINAL_WEB_URIS
        echo "SPA URIs:"
        echo $FINAL_SPA_URIS

        # PATCH the updated list
        curl -X PATCH \
          "https://graph.microsoft.com/v1.0/applications/${ENTRA_CHILD_APP_OBJECT_ID}" \
          -H "Authorization: Bearer ${BEARER_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{
            \"web\": { \"redirectUris\": $FINAL_WEB_URIS },
            \"spa\": { \"redirectUris\": $FINAL_SPA_URIS }
          }"

      {{end}}

  setup.venom.env:
    preconditions:
      - test -n "${TEST_INGRESS_HOST}"
    env:
      VARIABLES_ENV_FILE: "{{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env"
    cmds:
      - |
        echo "VENOM_VAR_SKIP_TEST_INGRESS=false" >> "${VARIABLES_ENV_FILE}"
        echo "VENOM_VAR_TEST_INGRESS_HOST=${TEST_INGRESS_HOST}" >> "${VARIABLES_ENV_FILE}"
        echo "VENOM_VAR_SKIP_TEST_WEBMODELER=false" >> "${VARIABLES_ENV_FILE}"
        # Step 1: Merge all YAMLs
        MERGED_YAML=$(yq eval-all '. as $item ireduce ({}; . * $item )' \
          "${TEST_VALUES_BASE_DIR}/common/values-integration-test.yaml" \
          "${TEST_VALUES_BASE_DIR}/chart-full-setup/values-integration-test-ingress-${TEST_VALUES_SCENARIO}.yaml" \
          "${INFRA_TYPE_VALUES}" \
          /tmp/extra-values-file.yaml)
        
        echo "--- Merged YAML ---"
        echo "$MERGED_YAML"
        echo "-------------------"
        # Step 2: Extract the Elasticsearch enabled value
        ES_ENABLED=$(echo "$MERGED_YAML" | yq '.elasticsearch.enabled // false')
        
        echo "Elasticsearch enabled: $ES_ENABLED"
  
        # Step 3: Determine if we should skip test
        VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$(echo "$ES_ENABLED" | yq 'not')
        
        echo "Skip Elasticsearch test: $VENOM_VAR_SKIP_TEST_ELASTICSEARCH"
        echo "VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$VENOM_VAR_SKIP_TEST_ELASTICSEARCH" >> "$VARIABLES_ENV_FILE"
        #echo "VENOM_VAR_SKIP_TEST_ELASTICSEARCH=$(yq eval-all '. as $item ireduce ({}; . * $item )' {{ .TEST_VALUES_BASE_DIR }}/common/values-integration-test.yaml {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-{{ .TEST_VALUES_SCENARIO }}.yaml {{ env "INFRA_TYPE_VALUES" }} /tmp/extra-values-file.yaml | yq '.elasticsearch.enabled // false | not')" >> "${VARIABLES_ENV_FILE}"
        echo "VENOM_EXTRA_ARGS=--var-from-file=./vars/variables-ingress-combined.yaml" >> "${VARIABLES_ENV_FILE}"
        echo "ZEEBE_VERSION=$(yq '.zeebe.image.tag' {{ .TEST_CHART_DIR }}/values.yaml)" >> "${VARIABLES_ENV_FILE}"
        # In case the Zeebe version has not been released officially yet.
        echo "ZEEBE_VERSION_FALLBACK=$(grep zbctl ../../../../.tool-versions | cut -d " " -f 2)" >> "${VARIABLES_ENV_FILE}"
        cat ${VARIABLES_ENV_FILE}

  setup.exec:
    env:
      TEST_AUTH_TYPE: "{{ .TEST_AUTH_TYPE }}"
      VARIABLES_ENV_FILE: "{{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env"
    cmds:
    - |
      {{if eq (env "TEST_VALUES_SCENARIO") "opensearch"}}
        sed -i 's/custom/{{ .TEST_OPENSEARCH_PREFIX }}/g' {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-{{ .TEST_VALUES_SCENARIO }}.yaml
      {{end}}
    - |
      {{if eq (env "TEST_AUTH_TYPE") "oidc"}}
        sed -i 's/<clientId>/{{ .ENTRA_CHILD_APP_CLIENT_ID }}/g' {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-oidc.yaml
        sed -i 's/<clientSecret>/{{ .ENTRA_CHILD_APP_CLIENT_SECRET }}/g' {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-oidc.yaml
        sed -i 's/<directoryId>/{{ .ENTRA_CHILD_APP_DIRECTORY_ID }}/g' {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-oidc.yaml
        # sed -i 's/<objectId>/{{ .ENTRA_CHILD_APP_OBJECT_ID }}/g' {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-oidc.yaml
        cat {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-oidc.yaml
      {{end}}

      helm install integration {{ .TEST_CHART_NAME }} \
      --version {{ .TEST_CHART_VERSION }} \
      --namespace {{ .TEST_NAMESPACE }} \
      {{ (and (eq (env "TEST_CHART_VERSION") "13.0.0-alpha7") (eq (env "TEST_AUTH_TYPE") "keycloak")) | ternary (printf "--values %s/common/values-integration-test-alpha7.yaml" .TEST_VALUES_BASE_DIR) (printf "--values %s/common/values-integration-test.yaml" .TEST_VALUES_BASE_DIR) }} \
      --values {{ .TEST_VALUES_BASE_DIR }}/common/values-integration-test-pull-secrets.yaml \
      --values {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-{{ .TEST_AUTH_TYPE }}.yaml \
      --values {{ .TEST_VALUES_BASE_DIR }}/chart-full-setup/values-integration-test-ingress-{{ .TEST_VALUES_SCENARIO }}.yaml \
      {{ eq (env "PLATFORM") "eks" | ternary (printf "--values %s/chart-full-setup/values-integration-test-ingress-infra.yaml" .TEST_VALUES_BASE_DIR) "" }}  \
      --values {{ env "INFRA_TYPE_VALUES" }} \
      --values /tmp/extra-values-file.yaml \
      --timeout 20m0s \
      --wait \
      {{ .TEST_HELM_EXTRA_ARGS }}

  setup.post:
    cmds:
    - echo "No post task for this test."

  setup.clean:
    cmds:
    - kubectl delete secret registry-camunda-cloud --ignore-not-found=true
    - git checkout {{ .TEST_CHART_DIR }}/test/integration/testsuites/vars/files/variables.env

  upgrade.pre:
    deps: [upgrade:pre]

  upgrade.exec:
    deps: [upgrade:exec]

  all:
    cmds:
    - task: init.seed
    - task: setup.pre
    - task: setup.exec
    - task: setup.post
    - task: test.preflight
    - task: test.core
    - task: test.playwright.core
