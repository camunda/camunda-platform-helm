# Docs: https://github.com/camunda/camunda-platform-helm/blob/main/docs/gha-workflows.md
name: "Test - Integration - Sequential"

on:
  push:

permissions:
  contents: read

env:
  # Vars with "CI_" prefix are used in the CI workflow only.
  # Vars with "TEST_" prefix are used in the test runner tool (Task).
  CI_HOSTNAME_BASE: ci.distro.ultrawombat.com
  # The Helm repo which is used during the upgrade flow.
  TEST_CHART_REPO: camunda/camunda-platform-helm
  # Docker Hub auth to avoid image pull rate limit.
  TEST_CREATE_DOCKER_LOGIN_SECRET: "TRUE"
  TEST_DOCKER_USERNAME: ${{ secrets.DISTRO_CI_DOCKER_USERNAME_DOCKERHUB }}
  TEST_DOCKER_PASSWORD: ${{ secrets.DISTRO_CI_DOCKER_PASSWORD_DOCKERHUB }}
  # Camunda registry auth to access WebModeler Docker image since it's not public.
  TEST_DOCKER_USERNAME_CAMUNDA_CLOUD: ${{ secrets.DISTRO_CI_DOCKER_USERNAME_CAMUNDA }}
  TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD: ${{ secrets.DISTRO_CI_DOCKER_PASSWORD_CAMUNDA }}

jobs:

  test:
    if: github.event.action != 'closed'
    name: Integration Sequential Upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      deployments: write
    env:
      TEST_CLUSTER_TYPE: "gke"

    steps:
      - name: ‚ÑπÔ∏è Print workflow inputs ‚ÑπÔ∏è
        env:
          GITHUB_CONTEXT: ${{ toJson(inputs) }}
        run: |
          echo "Workflow Inputs:"
          echo "${GITHUB_CONTEXT}" | jq '."extra-values" = "<Check below>"'
          echo "Workflow Inputs - Extra Values:"
          echo "${GITHUB_CONTEXT}" | jq -r '."extra-values"'
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # This is needed to load repo GH composite actions if the workflow triggered by workflow_call.
          repository: camunda/camunda-platform-helm
          ref: ${{ inputs.camunda-helm-git-ref }}
      # When there is a vault-secret-mapping input given, use Vault instead of GitHub secrets
      # and populate environment variables from Vault
      - name: Import Vault secrets
        id: secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        if: inputs.vault-secret-mapping != ''
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ inputs.vault-secret-mapping }}
          exportEnv: true
      # Used to create/delete GitHub environment.
      # NOTE: The GH app requires "administration:write" access to be able to delete the GH environment.
      - name: Generate GitHub token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        id: generate-github-token
        with:
          app_id: ${{ secrets.GH_APP_ID_DISTRO_CI_MANAGE_GH_ENVS }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY_DISTRO_CI_MANAGE_GH_ENVS }}
      - name: Install tools
        uses: ./.github/actions/install-tool-versions
        with:
          tools: |
            golang
            helm
            kubectl
            oc
            task
            yq
      - name: Authenticate to GKE
        uses: ./.github/actions/gke-login
        with:
          cluster-name: ${{ secrets.DISTRO_CI_GCP_GKE_CLUSTER_NAME }}
          cluster-location: ${{ secrets.DISTRO_CI_GCP_GKE_CLUSTER_LOCATION }}
          workload-identity-provider: ${{ secrets.DISTRO_CI_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service-account: ${{ secrets.DISTRO_CI_GCP_SERVICE_ACCOUNT }}
      - name: Add Helm repos and dependencies
        run: |
          make helm.repos-add
          make helm.dependency-update
      - name: Create test namespace
        run: |
          export TEST_NAMESPACE=distribution-sequential-${{ github.run_id }}
          echo TEST_NAMESPACE=$TEST_NAMESPACE | tee -a $GITHUB_ENV
          kubectl create ns $TEST_NAMESPACE
          kubectl label ns $TEST_NAMESPACE github-run-id=$GITHUB_WORKFLOW_RUN_ID
          kubectl label ns $TEST_NAMESPACE github-job-id=$GITHUB_WORKFLOW_JOB_ID
          kubectl label ns $TEST_NAMESPACE github-org=$(dirname $GITHUB_REPOSITORY)
          kubectl label ns $TEST_NAMESPACE github-repo=$(basename $GITHUB_REPOSITORY)
          kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1d
          kubectl annotate ns $TEST_NAMESPACE github-workflow-run-url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      - name: Set Deployment Secrets
        run: |
          kubectl apply -n $TEST_NAMESPACE \
            -f .github/config/external-secret/external-secret-certificates.yaml

          # For backward compatibility.
          kubectl apply -n $TEST_NAMESPACE \
            -f .github/config/external-secret/external-secret-integration-test-credentials.yaml

          : # Ensure ExternalSecrets are created
          for secret in $(kubectl get externalsecret -n distribution-team -o jsonpath='{.items[*].metadata.name}'); do
            echo "Waiting for ExternalSecret: $secret"
            kubectl describe externalsecret/$secret -n distribution-team
            kubectl wait --for=condition=Ready externalsecret/$secret -n distribution-team --timeout=300s
          done

      - name: Start GitHub deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        id: deployment
        with:
          step: start
          token: ${{ steps.generate-github-token.outputs.token }}
          env: gke-${{ github.run_id }}
          ref: ${{ github.ref }}
      - name: Pre setup
        timeout-minutes: 5
        env:
          TEST_CHART_FLOW: ${{ matrix.scenario.flow }}
          TEST_INGRESS_HOST: ${{ steps.vars.outputs.ingress-host }}
        run: |
          task -d test/integration/scenarios/chart-full-setup setup.pre

          echo "Extra values from workflow:"
          echo "${{ inputs.extra-values }}" | tee /tmp/extra-values-file.yaml
      - name: üåü Setup Camunda chart üåü
        env:
          TEST_CHART_FLOW: setup
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_INSTALL }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
          TEST_VALUES_BASE_DIR: charts/camunda-platform-8.3
          TEST_CHART_NAME: camunda-platform-8.3
        run: |
          task -d test/integration/scenarios/chart-full-setup setup.exec
      - name: Post setup
        timeout-minutes: 5
        run: |
          task -d test/integration/scenarios/chart-full-setup setup.post
      - name: Pre Upgrade
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.pre
      - name: üåü Upgrade Camunda chart üåü
        if: matrix.scenario.flow == 'upgrade'
        env:
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: ${{ inputs.test-case }}
          TEST_VALUES_SCENARIO: ${{ inputs.scenario }}
          TEST_CHART_NAME: camunda-platform-8.4
          TEST_VALUES_BASE_DIR: camunda-platform-8.4
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_UPGRADE }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.exec
      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core





      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core
      - name: Pre Upgrade
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.pre
      - name: üåü Upgrade Camunda chart üåü
        if: matrix.scenario.flow == 'upgrade'
        env:
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: ${{ inputs.test-case }}
          TEST_VALUES_SCENARIO: ${{ inputs.scenario }}
          TEST_CHART_NAME: camunda-platform-8.5
          TEST_VALUES_BASE_DIR: camunda-platform-8.5
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_UPGRADE }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.exec
      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core




      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core
      - name: Pre Upgrade
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.pre
      - name: üåü Upgrade Camunda chart üåü
        if: matrix.scenario.flow == 'upgrade'
        env:
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: ${{ inputs.test-case }}
          TEST_VALUES_SCENARIO: ${{ inputs.scenario }}
          TEST_CHART_NAME: camunda-platform-8.6
          TEST_VALUES_BASE_DIR: camunda-platform-8.6
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_UPGRADE }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.exec
      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core



      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core
      - name: Pre Upgrade
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.pre
      - name: üåü Upgrade Camunda chart üåü
        if: matrix.scenario.flow == 'upgrade'
        env:
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: ${{ inputs.test-case }}
          TEST_VALUES_SCENARIO: ${{ inputs.scenario }}
          TEST_CHART_NAME: camunda-platform-8.7
          TEST_VALUES_BASE_DIR: camunda-platform-8.7
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_UPGRADE }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
        run: |
          task -d test/integration/scenarios/chart-full-setup upgrade.exec
      - name: ‚≠êÔ∏è Run Preflight TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 10
        run: |
          task -d test/integration/scenarios/chart-full-setup test.preflight
      - name: ‚≠êÔ∏è Run Core TestSuite ‚≠êÔ∏è
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d test/integration/scenarios/chart-full-setup test.core


      - name: Update GitHub deployment status
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        with:
          step: finish
          token: ${{ steps.generate-github-token.outputs.token }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ steps.vars.outputs.ingress-host }}
          env: gke-${{ github.run_id }}
          ref: ${{ github.ref }}
      - name: üö® Get failed Pods info üö®
        if: failure()
        uses: ./.github/actions/failed-pods-info
      - name: Cleanup GitHub deployment
        if: always() && (env.CI_DEPLOYMENT_TTL == '' || matrix.distro.type != 'kubernetes')
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        with:
          step: delete-env
          token: ${{ steps.generate-github-token.outputs.token }}
          env: ${{ steps.vars.outputs.identifier }}
          ref: ${{ inputs.caller-git-ref }}
      - name: Cleanup test namespace
        if: always()
        run: |
          if [ "${{ env.CI_DEPLOYMENT_TTL }}" != "" ]; then
            if [ "${{ matrix.distro.type }}" == "kubernetes" ]; then
              kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=${CI_DEPLOYMENT_TTL} --overwrite=true
            else
              kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1s --overwrite=true
            fi
          else
            kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1s --overwrite=true
          fi

#   # Rerun failed jobs running on self-hosted runners in case of network issues or node preemption
#   rerun-failed-jobs:
#     name: Rerun failed jobs
#     needs:
#       - test
#     if: failure() && inputs.github-workflow-rerun-enabled == true && fromJSON(github.run_attempt) < 3
#     runs-on: ubuntu-latest
#     steps:
#       - name: Retrigger job
#         uses: camunda/infra-global-github-actions/rerun-failed-run@main
#         with:
#           error-messages: |
#             lost communication with the server.
#             The runner has received a shutdown signal.
#             Process completed with exit code 1.
#           run-id: ${{ github.run_id }}
#           repository: ${{ github.repository }}
#           vault-addr: ${{ secrets.VAULT_ADDR }}
#           vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
#           vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
