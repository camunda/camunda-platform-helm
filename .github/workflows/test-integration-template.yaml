# Docs: https://github.com/camunda/camunda-platform-helm/blob/main/docs/gha-workflows.md
name: "Test - Integration - Template"

on:
  workflow_dispatch:
    inputs:
      camunda-helm-dir:
        description: The directory name of the chart to build upon
        required: false
        default: camunda-platform-8.8
        type: string
      platforms:
        description: The platforms to run the test on
        required: false
        default: gke
        type: string
      flows:
        description: The flows to run the test on
        required: false
        default: install,upgrade
        type: string
      infra-type:
        description: Define the infrastructure that will be used to run the deployment.
        default: preemptible
        type: string
      scenario:
        description: The scenario to run the test on
        required: false
        default: base
        type: string
      camunda-helm-repo:
        description: The Helm repo which is used during the upgrade flow.
        required: false
        default: camunda/camunda-platform
        type: string
      camunda-helm-credentials-source:
        description: |
          Auto-generate credentials or copy them from external secret.
          Valid options: auto-generated or external-secret-only.
          New optional auto-generated secrets are only supported in Camunda 8.4 chart and above.
        required: false
        default: auto-generated
        type: string
      test-enabled:
        description: Flag to enable or disable the test suites
        required: false
        default: true
        type: boolean

  workflow_call:
    inputs:
      identifier:
        description: The unique identifier of used in the deployment hostname.
        required: true
        type: string
      camunda-helm-repo:
        description: The Helm repo which is used during the upgrade flow.
        required: false
        default: camunda/camunda-platform
        type: string
      camunda-helm-dir:
        required: false
        default: camunda-platform-8.8
        type: string
      camunda-helm-git-ref:
        required: false
        default: main
        type: string
      camunda-helm-upgrade-version:
        description: The Helm chart released version to upgrade from.
        required: false
        default: ""
        type: string
      caller-git-ref:
        required: false
        default: main
        type: string
      deployment-ttl:
        description: Define a TTL for the lifespan of the deployment.
        required: false
        default: ""
        type: string
      platforms:
        default: gke
        type: string
      infra-type:
        description: Define the infrastructure that will be used to run the deployment.
        default: "preemptible"
        type: string
      flows:
        required: false
        default: install
        type: string
      test-enabled:
        required: false
        default: true
        type: boolean
      extra-values:
        description: Pass extra values to the Helm chart.
        required: false
        type: string
      vault-secret-mapping:
        description: (optional) defines how to map Vault secrets to distro CI environment variables
        required: false
        type: string
      auth-data:
        required: false
        type: string
      cluster-type:
        required: false
        type: string
      matrix-data:
        required: false
        type: string
      test-case:
        required: false
        default: "pr"
        type: string
      scenario:
        required: false
        default: "base"
        type: string
      camunda-helm-post-render:
        description: Set to true if you would like to run the post-renderer script for OpenShift
        required: false
        default: true
        type: boolean
      camunda-helm-credentials-source:
        description: |
          Auto-generate credentials or copy them from external secret.
          Valid options: auto-generated or external-secret-only.
          New optional auto-generated secrets are only supported in Camunda 8.4 chart and above.
        required: false
        default: auto-generated
        type: string
      github-workflow-rerun-enabled:
        description: Flag to enable or disable retries for failed runs
        required: false
        default: true
        type: boolean

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.identifier }}
  cancel-in-progress: true

env:
  # Vars with "CI_" prefix are used in the CI workflow only.
  # Vars with "TEST_" prefix are used in the test runner tool (Task).
  CI_DEPLOYMENT_TTL: ${{ inputs.deployment-ttl }}
  CI_HOSTNAME_BASE: ci.distro.ultrawombat.com
  # The Helm repo which is used during the upgrade flow.
  TEST_CHART_REPO: ${{ inputs.camunda-helm-repo }}
  # Docker Hub auth to avoid image pull rate limit.
  TEST_CREATE_DOCKER_LOGIN_SECRET: "TRUE"
  TEST_DOCKER_USERNAME: ${{ secrets.DISTRO_CI_DOCKER_USERNAME_DOCKERHUB }}
  TEST_DOCKER_PASSWORD: ${{ secrets.DISTRO_CI_DOCKER_PASSWORD_DOCKERHUB }}
  # Camunda registry auth to access WebModeler Docker image since it's not public.
  TEST_DOCKER_USERNAME_CAMUNDA_CLOUD: ${{ secrets.DISTRO_CI_DOCKER_USERNAME_CAMUNDA }}
  TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD: ${{ secrets.DISTRO_CI_DOCKER_PASSWORD_CAMUNDA }}

jobs:
  init:
    name: Integration ${{ inputs.scenario }} - Generate test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-workflow-matrix.outputs.matrix }}
    steps:
      - name: CI Setup - Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # This is needed if the workflow is triggered by workflow_call.
          repository: camunda/camunda-platform-helm
          ref: ${{ inputs.camunda-helm-git-ref }}

      - name: CI Setup - Generate workflow matrix
        id: generate-workflow-matrix
        env:
          CI_MATRIX_FILE: ".github/config/test-integration-matrix.yaml"
          # Use GH env to safly load JSON matrix input.
          CI_MATRIX_INPUT: "${{ inputs.matrix-data }}"
        run: |
          # TODO: Find a better way to handle GitHub Actions expressions substitution.
          # Substitute vars.
          export INPUTS_PLATFORMS_GKE=${{ contains(inputs.platforms, 'gke') }}
          export INPUTS_PLATFORMS_ROSA=${{ contains(inputs.platforms, 'rosa') }}
          export INPUTS_FLOWS_INSTALL=${{ contains(inputs.flows, 'install') }}
          export INPUTS_FLOWS_UPGRADE=${{ contains(inputs.flows, 'upgrade') }}
          cat ${CI_MATRIX_FILE} | envsubst | tee /tmp/matrix.yaml
          # Read matrix YAML file.
          matrix_defult="$(yq '.matrix' --indent=0 --output-format json /tmp/matrix.yaml)"
          matrix="${CI_MATRIX_INPUT:-${matrix_defult}}"
          # Print and set matrix JSON object as an output.
          echo "${matrix}" | jq
          echo "matrix=$(echo ${matrix} | jq -c)" > "$GITHUB_OUTPUT"

  test:
    if: github.event.action != 'closed'
    name: Integration ${{ inputs.scenario }} - ${{ matrix.scenario.name }}
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      deployments: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    env:
      TEST_CLUSTER_TYPE: ${{ matrix.distro.type || inputs.cluster-type }}

    steps:
      - name: Info - ℹ️ Print workflow inputs ℹ️
        env:
          GITHUB_CONTEXT: ${{ toJson(inputs) }}
        run: |
          echo "Workflow Inputs:"
          echo "${GITHUB_CONTEXT}" | jq '."extra-values" = "<Check below>"'
          echo "Workflow Inputs - Extra Values:"
          echo "${GITHUB_CONTEXT}" | jq -r '."extra-values"'

      - name: CI Setup - Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # This is needed to load repo GH composite actions if the workflow triggered by workflow_call.
          repository: camunda/camunda-platform-helm
          ref: ${{ inputs.camunda-helm-git-ref }}

      # When there is a vault-secret-mapping input given, use Vault instead of GitHub secrets
      # and populate environment variables from Vault
      - name: CI Setup - Import Vault secrets
        id: secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        if: inputs.vault-secret-mapping != ''
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ inputs.vault-secret-mapping }}
          exportEnv: true

      # Used to create/delete GitHub environment.
      # NOTE: The GH app requires "administration:write" access to be able to delete the GH environment.
      - name: CI Setup - Generate GitHub token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        id: generate-github-token
        with:
          app_id: ${{ secrets.GH_APP_ID_DISTRO_CI_MANAGE_GH_ENVS }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY_DISTRO_CI_MANAGE_GH_ENVS }}

      - name: CI Setup - Install tools
        uses: ./.github/actions/install-tool-versions
        with:
          tools: |
            golang
            helm
            kubectl
            oc
            task
            yq
            zbctl
            
      # TODO: Later, find a way to abstract the auth for different platforms.
      - name: CI Setup - Authenticate to GKE
        if: matrix.distro.platform == 'gke' && inputs.auth-data == ''
        uses: ./.github/actions/gke-login
        with:
          cluster-name: ${{ secrets[matrix.distro.secret.cluster-name] }}
          cluster-location: ${{ secrets[matrix.distro.secret.cluster-location] }}
          workload-identity-provider: ${{ secrets[matrix.distro.secret.workload-identity-provider] }}
          service-account: ${{ secrets[matrix.distro.secret.service-account] }}

      - name: CI Setup - Authenticate to OpenShift
        if: matrix.distro.platform == 'rosa' && inputs.auth-data == ''
        uses: redhat-actions/oc-login@5eb45e848b168b6bf6b8fe7f1561003c12e3c99d # v1
        with:
          openshift_server_url: ${{ secrets[matrix.distro.secret.server-url] }}
          openshift_username: ${{ secrets[matrix.distro.secret.username] }}
          openshift_password: ${{ secrets[matrix.distro.secret.password] }}

      - name: CI Setup - Authenticate via var
        if: inputs.auth-data != ''
        run: |
          mkdir -p $HOME/.kube
          echo "${{ inputs.auth-data }}" | base64 --decode > encrypted_kubeconfig.enc
          openssl enc -aes-256-cbc -d -in encrypted_kubeconfig.enc -out "$HOME/.kube/config" -pass pass:"${GITHUB_TOKEN}" -pbkdf2
          rm encrypted_kubeconfig.enc
          chmod 600 $HOME/.kube/config

      - name: CI Setup - ℹ️ Set workflow vars for both install and upgrade ℹ️
        id: vars
        uses: ./.github/actions/workflow-vars
        with:
          deployment-ttl: ${{ env.CI_DEPLOYMENT_TTL }}
          setup-flow: ${{ matrix.scenario.flow }}
          platform: ${{ matrix.distro.platform }}
          identifier-base: ${{ inputs.identifier }}
          ingress-hostname-base: ${{ env.CI_HOSTNAME_BASE }}
          chart-dir: ${{ inputs.camunda-helm-dir }}
          chart-upgrade-version: ${{ inputs.camunda-helm-upgrade-version }}

      - name: CI Setup - Set test type vars
        id: test-type-vars
        uses: ./.github/actions/test-type-vars
        with:
          chart-dir: "${{ inputs.camunda-helm-dir }}"

      - name: CI Setup - Add Helm repos and update helm dependencies
        run: |
          export chartPath="charts/${{ inputs.camunda-helm-dir }}"
          make helm.repos-add
          make helm.dependency-update

      - name: CI Setup - Start GitHub deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        id: deployment
        with:
          step: start
          token: ${{ steps.generate-github-token.outputs.token }}
          env: ${{ steps.vars.outputs.identifier }}
          ref: ${{ inputs.caller-git-ref }}

      - name: Cluster Setup - Configure the namespace
        run: |
          echo $TEST_NAMESPACE
          kubectl delete ns --ignore-not-found=true \
            -l "github-id=${{ steps.vars.outputs.identifier }},test-flow=${{ matrix.scenario.flow }}"
          kubectl create ns $TEST_NAMESPACE
          kubectl label ns $TEST_NAMESPACE github-run-id=$GITHUB_WORKFLOW_RUN_ID
          kubectl label ns $TEST_NAMESPACE github-job-id=$GITHUB_WORKFLOW_JOB_ID
          kubectl label ns $TEST_NAMESPACE github-id=${{ steps.vars.outputs.identifier }}
          kubectl label ns $TEST_NAMESPACE test-flow=${{ matrix.scenario.flow }}
          kubectl label ns $TEST_NAMESPACE github-org=$(dirname $GITHUB_REPOSITORY)
          kubectl label ns $TEST_NAMESPACE github-repo=$(basename $GITHUB_REPOSITORY)
          kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1d
          kubectl annotate ns $TEST_NAMESPACE github-workflow-run-url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      - name: Cluster Setup - Install docker registry on cluster
        run: |
          kubectl create secret docker-registry registry-camunda-cloud \
          --namespace $TEST_NAMESPACE \
          --docker-server "registry.camunda.cloud" \
          --docker-username $TEST_DOCKER_USERNAME_CAMUNDA_CLOUD \
          --docker-password $TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD

          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup init.seed

      - name: Cluster Setup - Configure TLS Certificates/Secrets
        run: |
          kubectl apply -n $TEST_NAMESPACE \
            -f .github/config/external-secret/external-secret-certificates.yaml

          # For backward compatibility.
          kubectl apply -n $TEST_NAMESPACE \
            -f .github/config/external-secret/external-secret-integration-test-credentials.yaml

          : # Ensure ExternalSecrets are created
          for secret in $(kubectl get externalsecret -n distribution-team -o jsonpath='{.items[*].metadata.name}'); do
            echo "Waiting for ExternalSecret: $secret"
            kubectl describe externalsecret/$secret -n distribution-team
            kubectl wait --for=condition=Ready externalsecret/$secret -n distribution-team --timeout=300s
          done

      - name: Helm - Execute before install lifecycle tasks
        timeout-minutes: 5
        env:
          TEST_CHART_FLOW: ${{ matrix.scenario.flow }}
          TEST_INGRESS_HOST: ${{ steps.vars.outputs.ingress-host }}
          TEST_SCENARIO: ${{ inputs.scenario }}
        run: |
          echo "Extra values from workflow:"
          echo "${{ inputs.extra-values }}" | tee /tmp/extra-values-file.yaml

          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup setup.pre

      - name: Helm - Install - Setup helm extra args
        if: matrix.scenario.flow == 'install'
        env:
          TEST_INGRESS_HOST: ${{ steps.vars.outputs.ingress-host }}
        run: |
          TEST_HELM_EXTRA_ARGS_INSTALL="${TEST_HELM_EXTRA_ARGS} --set global.ingress.host=${TEST_INGRESS_HOST}"
          echo "TEST_HELM_EXTRA_ARGS_INSTALL=${TEST_HELM_EXTRA_ARGS_INSTALL}" | tee -a $GITHUB_ENV

      - name: Helm - Install - Setup helm extra args (credentials)
        if: matrix.scenario.flow == 'install' && inputs.camunda-helm-credentials-source == 'auto-generated'
        run: |
          TEST_HELM_EXTRA_ARGS_INSTALL="${TEST_HELM_EXTRA_ARGS_INSTALL} --set global.secrets.autoGenerated=true"
          echo "TEST_HELM_EXTRA_ARGS_INSTALL=${TEST_HELM_EXTRA_ARGS_INSTALL}" | tee -a $GITHUB_ENV

      - name: Helm - Install - Setup helm extra args for opensearch
        if: matrix.scenario.flow == 'install' && inputs.scenario == 'opensearch'
        run: |
            TEST_HELM_EXTRA_ARGS_INSTALL="${TEST_HELM_EXTRA_ARGS_INSTALL} --set global.opensearch.url.host=search-qa-e2e-5q5uium4w7pgfz7i5tviimmmgm.eu-north-1.es.amazonaws.com"
            echo "TEST_HELM_EXTRA_ARGS_INSTALL=${TEST_HELM_EXTRA_ARGS_INSTALL}" | tee -a $GITHUB_ENV
            TEST_HELM_EXTRA_ARGS_INSTALL="${TEST_HELM_EXTRA_ARGS_INSTALL} --set global.opensearch.auth.password=${TEST_OPENSEARCH_PASSWORD}"
            echo "TEST_HELM_EXTRA_ARGS_INSTALL=${TEST_HELM_EXTRA_ARGS_INSTALL}" | tee -a $GITHUB_ENV

      - name: Helm - Upgrade - Setup helm extra args
        if: matrix.scenario.flow == 'upgrade' && inputs.camunda-helm-dir == env.TEST_CAMUNDA_HELM_DIR_ALPHA
        run: |
          # Since Zeebe 8.6 it's not possible to upgrade from/to alpha version.
          # The Zeebe team advised to use SNAPSHOT tag instead.
          TEST_HELM_EXTRA_ARGS_INSTALL="${TEST_HELM_EXTRA_ARGS_INSTALL} --set zeebe.image.tag=SNAPSHOT"
          echo "TEST_HELM_EXTRA_ARGS_INSTALL=${TEST_HELM_EXTRA_ARGS_INSTALL}" | tee -a $GITHUB_ENV
          TEST_HELM_EXTRA_ARGS_UPGRADE="${TEST_HELM_EXTRA_ARGS_UPGRADE} --set zeebe.image.tag=SNAPSHOT"
          echo "TEST_HELM_EXTRA_ARGS_UPGRADE=${TEST_HELM_EXTRA_ARGS_UPGRADE}" | tee -a $GITHUB_ENV

      - name: Helm - Upgrade - Setup helm extra args for opensearch
        if: matrix.scenario.flow == 'upgrade' && inputs.scenario == 'opensearch'
        run: |
            TEST_HELM_EXTRA_ARGS_UPGRADE="${TEST_HELM_EXTRA_ARGS_UPGRADE} --set global.opensearch.url.host=search-qa-e2e-5q5uium4w7pgfz7i5tviimmmgm.eu-north-1.es.amazonaws.com"
            echo "TEST_HELM_EXTRA_ARGS_UPGRADE=${TEST_HELM_EXTRA_ARGS_UPGRADE}" | tee -a $GITHUB_ENV
            TEST_HELM_EXTRA_ARGS_UPGRADE="${TEST_HELM_EXTRA_ARGS_UPGRADE} --set global.opensearch.auth.password=${TEST_OPENSEARCH_PASSWORD}"
            echo "TEST_HELM_EXTRA_ARGS_UPGRADE=${TEST_HELM_EXTRA_ARGS_UPGRADE}" | tee -a $GITHUB_ENV

      - name: Helm - Install - 🌟 Install Camunda chart 🌟
        env:
          TEST_CHART_FLOW: ${{ matrix.scenario.flow }}
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: "${{ inputs.test-case }}"
          TEST_VALUES_SCENARIO: "${{ inputs.scenario }}"
          INFRA_TYPE: ${{ inputs.infra-type }}
          TEST_SCENARIO: ${{ inputs.scenario }}
          # both the run-id and the helm-dir is needed since all versions would use the same github-run-id when running the OpenSearch scenario
          TEST_OPENSEARCH_PREFIX: ${{ github.run_id }}-${{ inputs.camunda-helm-dir }}
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_INSTALL }}
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup setup.exec

      - name: Helm - Execute after install lifecycle tasks
        timeout-minutes: 5
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup setup.post

      - name: Helm - Upgrade - Execute before upgrade lifecycle tasks
        if: matrix.scenario.flow == 'upgrade'
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup upgrade.pre

      - name: Helm - Upgrade - 🌟 Upgrade Camunda chart 🌟
        if: matrix.scenario.flow == 'upgrade'
        env:
          TEST_OPENSHIFT_POST_RENDER: ${{ inputs.camunda-helm-post-render }}
          TEST_CASE: ${{ inputs.test-case }}
          TEST_VALUES_SCENARIO: ${{ inputs.scenario }}
          TEST_HELM_EXTRA_ARGS: >-
            ${{ env.TEST_HELM_EXTRA_ARGS_UPGRADE }}
            --set global.ingress.host=${{ steps.vars.outputs.ingress-host }}
            --values ${{ steps.test-type-vars.outputs.valuesBaseDir }}/infra/values-infra-${{ inputs.infra-type }}.yaml
            --values /tmp/extra-values-file.yaml
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup upgrade.exec

      - name: CI Setup - Update GitHub deployment status
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        with:
          step: finish
          token: ${{ steps.generate-github-token.outputs.token }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ steps.vars.outputs.ingress-host }}
          env: ${{ steps.vars.outputs.identifier }}
          ref: ${{ inputs.caller-git-ref }}

      - name: Test - ⭐️ Run Venom Env Setup ⭐️
        if: inputs.test-enabled
        env:
          TEST_INGRESS_HOST: ${{ steps.vars.outputs.ingress-host }}
        timeout-minutes: 1
        continue-on-error: false
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup setup.venom.env

      - name: Testplit- ⭐️ Run Venom Preflight TestSuite ⭐️
        if: inputs.test-enabled
        env:
          TEST_INGRESS_HOST: ${{ steps.vars.outputs.ingress-host }}
        timeout-minutes: 10
        continue-on-error: true
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup test.preflight

      - name: Test - ⭐️ Run Venom Core TestSuite ⭐️
        id: core-testsuite
        if: inputs.test-enabled
        timeout-minutes: 20
        run: |
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup test.core

      - name: Test - ⭐️ Run Playwright Core TestSuite ⭐️
        if: ${{ always() && inputs.test-enabled && (steps.core-testsuite.outcome == 'success' || steps.core-testsuite.outcome == 'failure') && contains(inputs.camunda-helm-dir, 'camunda-platform-8.7') }}
        timeout-minutes: 20
        run: |
          export TEST_INGRESS_HOST="${{ steps.vars.outputs.ingress-host }}"
          envsubst < ${ABSOLUTE_TEST_CHART_DIR}/test/integration/testsuites/vars/playwright/files/playwright-job-vars.env.template > ${ABSOLUTE_TEST_CHART_DIR}/test/integration/testsuites/vars/playwright/files/variables.env
          cat ${ABSOLUTE_TEST_CHART_DIR}/test/integration/testsuites/vars/playwright/files/variables.env
          task -d ${CI_TASKS_BASE_DIR}/chart-full-setup test.playwright.core

      - name: Test - ⭐️ Run Playwright Core TestSuite (Github Runner) ⭐️
        if: ${{ always() && inputs.test-enabled && (steps.core-testsuite.outcome == 'success' || steps.core-testsuite.outcome == 'failure') && contains(inputs.camunda-helm-dir, 'camunda-platform-8.7') }}
        timeout-minutes: 5
        run: |
          cd $GITHUB_WORKSPACE/scripts
          ./run-integration-tests.sh --absolute-chart-path ${ABSOLUTE_TEST_CHART_DIR} --namespace $TEST_NAMESPACE --update-helm-dependencies

      - name: Test - Upload Playwright report
        if: ${{ always() && inputs.test-enabled && (steps.core-testsuite.outcome == 'success' || steps.core-testsuite.outcome == 'failure') && contains(inputs.camunda-helm-dir, 'camunda-platform-8.7') }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.ABSOLUTE_TEST_CHART_DIR }}/test/integration/testsuites/test-results/
          name: playwright-report
          if-no-files-found: error
          retention-days: 5
        
      - name: CI Cleanup - 🚨 Get failed Pods info 🚨
        if: failure()
        uses: ./.github/actions/failed-pods-info

      - name: CI Cleanup - Cleanup GitHub deployment
        if: always() && (env.CI_DEPLOYMENT_TTL == '' || matrix.distro.type != 'kubernetes')
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1
        with:
          step: delete-env
          token: ${{ steps.generate-github-token.outputs.token }}
          env: ${{ steps.vars.outputs.identifier }}
          ref: ${{ inputs.caller-git-ref }}

      - name: CI Cleanup - Cleanup test namespace
        if: always()
        run: |
          if [ "${{ env.CI_DEPLOYMENT_TTL }}" != "" ]; then
            if [ "${{ matrix.distro.type }}" == "kubernetes" ]; then
              kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=${CI_DEPLOYMENT_TTL} --overwrite=true
            else
              kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1s --overwrite=true
            fi
          else
            kubectl annotate ns $TEST_NAMESPACE cleaner/ttl=1s --overwrite=true
          fi

  # Rerun failed jobs running on self-hosted runners in case of network issues or node preemption
  rerun-failed-jobs:
    name: Rerun failed jobs
    needs:
      - test
    if: failure() && inputs.github-workflow-rerun-enabled == true && fromJSON(github.run_attempt) < 3
    runs-on: ubuntu-latest
    steps:
      - name: Retrigger job
        uses: camunda/infra-global-github-actions/rerun-failed-run@main
        with:
          error-messages: |
            lost communication with the server.
            The runner has received a shutdown signal.
            Process completed with exit code 1.
          run-id: ${{ github.run_id }}
          repository: ${{ github.repository }}
          vault-addr: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
