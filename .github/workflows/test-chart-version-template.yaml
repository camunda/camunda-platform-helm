# Basic test for maintenance Camunda 8 Helm charts.
name: "Test - Chart Version - Template"

on:
  workflow_call:
    inputs:
      pr-number:
        description: Pull Request number. Required due to a github bug that is not giving the concurrency group the pull_request number from the github event
        required: true
        type: string
      camunda-version:
        description: Camunda version to test
        required: true
        type: string
      case:
        description: Type
        required: true
        type: string
      scenario:
        description: Scenario
        required: true
        type: string
      auth:
        description: Scenario
        required: true
        type: string
      exclude:
        description: Scenario
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ inputs.pr-number }}-${{ inputs.scenario }}-${{ inputs.camunda-version }}-${{ inputs.auth }}-${{ inputs.exclude }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  validation:
    name: Camunda ${{ inputs.camunda-version }} - Validation
    uses: ./.github/workflows/chart-validate-template.yaml
    with:
      identifier: "${{ github.event.pull_request.number }}-${{ inputs.scenario }}-vald-${{ inputs.camunda-version }}-${{ inputs.auth }}-${{ inputs.exclude }}"
      camunda-helm-dir: "camunda-platform-${{ inputs.camunda-version }}"
      camunda-helm-git-ref: "${{ github.event.pull_request.head.sha }}"

  init:
    name: Init Scenarios
    needs: validation
    runs-on: ubuntu-latest
    env:
      SCENARIOS_LIST: ${{ inputs.scenarios }}
    outputs:
      scenarios-formatted: ${{ steps.make-json-array.outputs.json_array }}
    steps:
      - name: Convert string to JSON array and set as output
        id: make-json-array
        run: |
          # For example, this converts the SCENARIOS_LIST, which is a string input ("multitenancy, oidc") to ["multitenancy","oidc"]
          # This is done because it is not possible to pass JSON arrays as input to a workflow. Therefore,
          # a string is passed and converted to a json array
          json=$(echo "$SCENARIOS_LIST" | jq -R -c 'split(",")')
          echo "json_array=$json" | tee -a $GITHUB_OUTPUT

  unit:
    name: Camunda ${{ inputs.camunda-version }} - Unit Test
    uses: ./.github/workflows/test-unit-template.yml
    with:
      identifier: "${{ github.event.pull_request.number }}-${{ inputs.scenario }}-unit-${{ inputs.camunda-version }}-${{ inputs.auth }}-${{ inputs.exclude }}"
      camunda-helm-dir: "camunda-platform-${{ inputs.camunda-version }}"
      camunda-helm-git-ref: "${{ github.event.pull_request.head.sha }}"

  local:
    name: Local cluster - KIND
    needs: [init]
    # This job needs to run on self-hosted runners because it requires more resources
    # than the default GitHub runners provide.
    runs-on: gcp-core-8-default
    env:
      TEST_NAMESPACE: camunda-platform
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install common software tooling
        uses: camunda/infra-global-github-actions/common-tooling@main
        with:
          overwrite: "false"
          build-essential-enabled: "true"
          node-enabled: "false"
          yarn-enabled: "false"
          buildx-enabled: "false"
          java-enabled: "false"
          python-enabled: "false"
      - name: Install tools
        uses: ./.github/actions/install-tool-versions
        with:
          tools: |
            helm
            kind
            kubectl
            make
            task
      - name: Create KIND cluster
        run: |
          kind create cluster --name camunda-platform-local
          kubectl config use-context kind-camunda-platform-local
      # Login to Docker registry to avoid image pull rate limit.
      - name: Create Docker login secret
        env:
          TEST_CREATE_DOCKER_LOGIN_SECRET: "TRUE"
          TEST_DOCKER_USERNAME: ${{ secrets.DISTRO_CI_DOCKER_USERNAME_DOCKERHUB }}
          TEST_DOCKER_PASSWORD: ${{ secrets.DISTRO_CI_DOCKER_PASSWORD_DOCKERHUB }}
        run: |
          kubectl create namespace ${{ env.TEST_NAMESPACE }}
          task docker-login --taskfile test/integration/scenarios/lib/init-seed-taskfile.yaml
      - name: Prepare Camunda Helm chart installation
        run: |
          make helm.repos-add
          helm package --dependency-update "charts/camunda-platform-${{ inputs.camunda-version }}"
      - name: Install Camunda Helm chart
        timeout-minutes: 10
        run: |
          helm install camunda-platform *.tgz --wait --timeout 10m0s \
            --namespace ${{ env.TEST_NAMESPACE }} \
            --values "charts/camunda-platform-${{ inputs.camunda-version }}/values-local.yaml"
          kubectl get pods --namespace ${{ env.TEST_NAMESPACE }}
      - name: Debug - Get Pods info
        if: failure()
        run: |
          kubectl get pods --namespace ${{ env.TEST_NAMESPACE }} -o yaml
          kubectl describe pods --namespace ${{ env.TEST_NAMESPACE }}

  integration:
    name: Camunda ${{ inputs.camunda-version }} - Integration Test
    needs: validation
    permissions:
      contents: read
      id-token: write
      deployments: write
    secrets: inherit
    uses: ./.github/workflows/test-integration-template.yaml
    with:
      identifier: "${{ github.event.pull_request.number }}-intg-${{ inputs.camunda-version }}"
      deployment-ttl: "${{ contains(github.event.pull_request.labels.*.name, 'test-persistent') && '1w' || '' }}"
      flows: "install,upgrade"
      camunda-helm-dir: "camunda-platform-${{ inputs.camunda-version }}"
      camunda-helm-git-ref: "${{ github.event.pull_request.head.sha }}"
      caller-git-ref: "${{ github.event.pull_request.head.sha }}"
      test-case: ${{inputs.case}}
      scenario: ${{inputs.scenario}}
      auth: ${{inputs.auth}}
      exclude: ${{inputs.exclude}}
