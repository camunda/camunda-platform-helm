name: "Chart - Release"

on:
  # Allow to run the workflow from GitHub UI and other workflows.
  workflow_dispatch:
    inputs:
      id:
        description: Camunda chart dir id like x.y
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  get_chart_version:
    name: Get Chart version from app version
    runs-on: ubuntu-latest
    env:
      CHART_DIR: "charts/camunda-platform-${{ inputs.id }}"
    outputs:
      chart_version: ${{ steps.get_chart_version.outputs.chart_version }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: output chart version
        id: get_chart_version
        run: |
          chart_file="${CHART_DIR}/Chart.yaml"
          chart_version="$(yq '.version' "${chart_file}")"
          echo "chart_version=${chart_version}" | tee -a $GITHUB_OUTPUT
  release:
    name: Release - ${{ needs.get_chart_version.outputs.chart_version }} (camunda-platform-${{ inputs.id }})
    needs: get_chart_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      CHART_RELEASER_CONFIG: ".github/config/chart-releaser.yaml"
      CHART_DIR: "charts/camunda-platform-${{ inputs.id }}"
      CHART_VERSION: "${{ needs.get_chart_version.outputs.chart_version }}"
      CHART_PACKAGE_NAME: "camunda-platform-${{ needs.get_chart_version.outputs.chart_version }}"
      CHART_TAG_NAME: "camunda-platform-${{ inputs.id }}-${{ needs.get_chart_version.outputs.chart_version }}"
    steps:
      # Init.
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Install tools
        uses: ./.github/actions/install-tool-versions
        with:
          tools: |
            helm
            helm-cr
            helm-ct
            yq
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      - name: Setup caching
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.asdf/installs/golang/*/packages/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Add Helm repos
        run: |
          make helm.repos-add
      - name: Update Helm dependency
        run: |
          chartPath="$(ct list-changed | tr '\n' ' ')" \
            make helm.dependency-update

      # Preparation.
      - name: Remove Dev Comments
        run: |
          target_files=(
            ${{ env.CHART_DIR }}/values*.yaml
            ${{ env.CHART_DIR }}/Chart.yaml
          )
          for target_file in "${target_files[@]}"; do
            sed -i '/# START DEV COMMENT/,/# END DEV COMMENT/d' "${target_file}"
          done
          echo "Dev comments removed:"
          git --no-pager diff
      - name: Tidy up
        run: |
          # Clean up badges from readme to avoid showing them in Artifact Hub.
          sed -ri '/Badge .+/d' "${{ env.CHART_DIR }}/README.md"

      # Release.
      # We moved away from "helm/chart-releaser-action" GHA because it has many limitations.
      # Using the chart-releaser CLI provides more flexibility and control over the release process.
      - name: Run Chart Releaser - Packaging
        run: |
          helm-cr package ${{ env.CHART_DIR }} --config ${{ env.CHART_RELEASER_CONFIG }}
      # Only keep the chart in the release process to avoid releasing untargeted charts.
      - name: Clean up packages
        run: |
          ls -lsa .cr-release-packages/*
          find .cr-release-packages/* \
            -not -name "camunda-platform-${{ env.CHART_VERSION }}.tgz" \
            -delete
      - name: Run Chart Releaser - Tagging/Uploading
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          helm-cr upload --config ${{ env.CHART_RELEASER_CONFIG }} \
            --push \
            --owner "${{ github.repository_owner }}" \
            --git-repo "$(basename ${{ github.repository }})" \
            --release-name-template "${{ env.CHART_TAG_NAME }}"
      - name: Run Chart Releaser - Indexing
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          helm-cr index --config ${{ env.CHART_RELEASER_CONFIG }} \
            --push \
            --owner "${{ github.repository_owner }}" \
            --git-repo "$(basename ${{ github.repository }})" \
            --release-name-template "${{ env.CHART_TAG_NAME }}"
      - name: Set GitHub release type
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          is_prerelease="$(yq e '.annotations."artifacthub.io/prerelease"' "${{ env.CHART_DIR }}/Chart.yaml")"
          if [[ "${is_prerelease}" == "true" ]]; then
            gh release edit "${{ env.CHART_TAG_NAME }}" \
              --repo "${GITHUB_REPOSITORY}" \
              --prerelease
          fi

      # Sign and upload the signature.
      - name: Sign Helm chart with Cosign
        run: |
          cosign sign-blob -y .cr-release-packages/${{ env.CHART_PACKAGE_NAME }}.tgz \
            --bundle "${{ env.CHART_PACKAGE_NAME }}.cosign.bundle"
      - name: Verify signed Helm chart with Cosign
        run: |
          cosign verify-blob .cr-release-packages/${{ env.CHART_PACKAGE_NAME }}.tgz \
            --bundle "${{ env.CHART_PACKAGE_NAME }}.cosign.bundle" \
            --certificate-identity "https://github.com/${GITHUB_WORKFLOW_REF}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
      - name: Upload Helm chart signature bundle
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          gh release upload "${{ env.CHART_TAG_NAME }}" \
            "${{ env.CHART_PACKAGE_NAME }}.cosign.bundle" \
            --repo "${GITHUB_REPOSITORY}"
      - name: Add release info to workflow summary
        run: |
          echo "ℹ️ Release Published ℹ️" >> $GITHUB_STEP_SUMMARY
          cat << EOF >> $GITHUB_STEP_SUMMARY
          - GitHub: https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ env.CHART_TAG_NAME }}
          - Artifact Hub: https://artifacthub.io/packages/helm/camunda/camunda-platform/${{ env.CHART_VERSION }}
          Note: Artifact Hub link needs some time till it's AH scraps the Helm repo index.
          EOF

  post-release:
    name: Post-Release - ${{ needs.get_chart_version.outputs.chart_version }} (camunda-platform-${{ inputs.id }})
    needs: [get_chart_version, release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    env:
      CHART_DIR: "charts/camunda-platform-${{ inputs.id }}"
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          # The verification step happens in the release branch before merging into the "main" branch.
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Install tools
        uses: ./.github/actions/install-tool-versions
        with:
          tools: |
            git-cliff
            gomplate
            helm
            helm-ct
            yq
      # - name: Simple smoke test
      #   uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e # v3
      #   with:
      #     max_attempts: 3
      #     timeout_minutes: 5
      #     retry_wait_seconds: 10
      #     command: make release.verify-components-version
      - name: Label PRs with app and chart version
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          # For Makefile.
          chartPath: "${{ env.CHART_DIR }}"
        run: |
          make release.set-prs-version-label
      - name: Generate version matrix
        env:
          # For Makefile.
          chartPath: "${{ env.CHART_DIR }}"
        run: |
          make helm.repos-add
          make release.generate-version-matrix-index
          make release.generate-version-matrix-released
          make release.generate-version-matrix-unreleased
      # We use git-chglog to generate the release notes and release-please
      # doesn't have an option to disable the generation of CHANGELOG.md files.
      # https://github.com/googleapis/release-please/issues/2007
      - name: Clean up release-please changelog files
        run: |
          rm -f "${{ env.CHART_DIR }}/CHANGELOG.md"
      - uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        with:
          author_name: "renovate[bot]"
          author_email: "29139614+renovate[bot]@users.noreply.github.com"
          message: "chore: Generate version matrix [skip ci]"
