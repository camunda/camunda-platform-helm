name: Generate chart and Enabled Scenarios Matrix
description: Find all scenarios for all charts and list charts with enabled scenarios.
inputs:
  charts-path:
    description: Charts path to match.
    default: "charts/camunda-platform*"
outputs:
  matrix:
    description: JSON matrix of changed charts which will be used as and input for GHA workflow matrix.
    value: ${{ steps.set-chart-versions.outputs.matrix }}
runs:
  using: composite
  steps:
    - name: ℹ️ Print workflow inputs ℹ️
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(inputs) }}
      run: |
        echo "Action Inputs:"
        echo "${GITHUB_CONTEXT}"
    - name: Generate matrix
      shell: bash
      env:
        MIN_SUPPORTED_VERSION: ${{ inputs.min-supported-version }}
      id: set-chart-versions
      run: |
        touch matrix_versions.txt
        echo "matrix:" >>matrix_versions.txt
        # since we do not have standard support for versions 8.3 and below, it is not included when listing out the files.
        ls -d ${{ inputs.charts-path }} | sort -V | awk -F'-' -v min="$MIN_SUPPORTED_VERSION" '$3 >= min' | while read chart_dir; do
          camunda_version="$(basename ${chart_dir} | sed 's/camunda-platform-//')"

          # skip chart version with "alpha" in the chrt version
          if echo "$camunda_version" | grep -q "alpha"; then
            continue
          fi

          #reads the array from the yaml file
          readarray nightlyScenarios < <(yq e -o=j -I=0 '.integration.case.nightly.scenario.[]' ${chart_dir}/test/ci-test-config.yaml)

          for nightlyScenario in "${nightlyScenarios[@]}"; do
            enabled=$(echo "$nightlyScenario" | yq e '.enabled' -)
            # skip if scenario is not enabled
            if [ "$enabled" = "false" ]; then
              continue
            fi
            echo "  - version: ${camunda_version}" >>matrix_versions.txt
            echo "    case: nightly" >>matrix_versions.txt
            echo "    scenario: $(echo "$nightlyScenario" | yq e '.name' -)" >>matrix_versions.txt
            echo "    auth: $(echo "$nightlyScenario" | yq e '.auth' -)" >>matrix_versions.txt
            echo "    exclude: $(echo "$nightlyScenario" | yq e '.exclude | join("|")' -)" >>matrix_versions.txt
          done
            sed -i -e '$s/,$/]\n/' matrix_versions.txt

        done
        cat matrix_versions.txt

        matrix="$(cat matrix_versions.txt | yq -o=json '.matrix' | jq -c '{ "include": . }' | jq -c 'walk(if type == "number" then tostring else . end)')"
        echo "matrix=${matrix}" | tee -a $GITHUB_OUTPUT
