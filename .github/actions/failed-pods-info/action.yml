name: Get failed Pods info
description: In case of failure, get Pods details like name, logs, and description

runs:
  using: composite
  steps:
  - name: Gather diagnostics for failed Pods
    if: failure()
    shell: bash
    run: |
      set -euo pipefail
      ARTIFACT_DIR="$RUNNER_TEMP/failed-pods"
      mkdir -p "$ARTIFACT_DIR"
      IFS=$'\n'

      for pod in $(kubectl -n "$TEST_NAMESPACE" get pods \
                     --field-selector=status.phase!=Succeeded \
                     -o jsonpath='{range .items[?(@.status.containerStatuses[?(@.ready==false)])]}{.metadata.name}{"\n"}{end}'); do
        echo "â‡¢ Collecting diagnostics for $pod"
        pod_dir="$ARTIFACT_DIR/$pod"; mkdir -p "$pod_dir"

        kubectl -n "$TEST_NAMESPACE" describe pod "$pod"           > "$pod_dir/describe.txt"
        kubectl -n "$TEST_NAMESPACE" get pod "$pod" -o yaml        > "$pod_dir/pod.yaml"
        kubectl -n "$TEST_NAMESPACE" get events \
          --field-selector involvedObject.name="$pod" \
          --sort-by=.metadata.creationTimestamp                    > "$pod_dir/events.txt"

        node=$(kubectl -n "$TEST_NAMESPACE" get pod "$pod" -o jsonpath='{.spec.nodeName}')
        kubectl describe node "$node"                              > "$pod_dir/node.txt" || true

        for c in $(kubectl -n "$TEST_NAMESPACE" get pod "$pod" -o jsonpath='{.spec.containers[*].name}'); do
          kubectl -n "$TEST_NAMESPACE" logs "$pod" -c "$c" --timestamps            > "$pod_dir/$c.log" || true
          kubectl -n "$TEST_NAMESPACE" logs "$pod" -c "$c" --previous --timestamps > "$pod_dir/$c.previous.log" || true
        done
        kubectl -n "$TEST_NAMESPACE" top pod "$pod" --containers   > "$pod_dir/top.txt" || true
      done
  - name: Upload diagnostics
    if: failure()
    uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
    with:
      name: failed-pods
      path: ${{ runner.temp }}/failed-pods
