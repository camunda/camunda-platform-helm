name: Generate chart matrix
description: Find changed charts and generate matrix for changed ones only.
inputs:
  charts-path:
    description: Charts path to match.
    default: "charts/camunda-platform*"
outputs:
  matrix:
    description: JSON matrix of changed charts which will be used as and input for GHA workflow matrix.
    value: ${{ steps.set-chart-versions.outputs.matrix }}
runs:
  using: composite
  steps:
    - name: ℹ️ Print workflow inputs ℹ️
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(inputs) }}
      run: |
        echo "Action Inputs:"
        echo "${GITHUB_CONTEXT}"
    - name: Get changed dirs
      id: changed-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
      with:
        dir_names: "true"
    - name: Generate matrix
      shell: bash
      id: set-chart-versions
      env:
        ALL_MODIFIED_FILES: ${{ steps.changed-files.outputs.all_modified_files }}
      run: |
        echo "Setting matrix based on changed files"
        echo "Changed files:"
        printf "%s\n" ${ALL_MODIFIED_FILES}
        touch matrix_versions.txt

        ls -d ${{ inputs.charts-path }} | while read chart_dir; do
          if [[ $(echo ${ALL_MODIFIED_FILES} | grep "${chart_dir}") ]]; then
            camunda_version="$(basename ${chart_dir} | sed 's/camunda-platform-//')";
            echo "Camunda version: ${camunda_version}"
            chart_version="$(cat ${chart_dir}/Chart.yaml | grep '^version:' | head -n 1 | sed 's/version: //')";
            chart_previous_camunda_version="$(echo ${camunda_version} | jq '. | (((.|tonumber) - .1)*10|round/10)')"
            chart_previous_helm_version="$(cat charts/camunda-platform-${chart_previous_camunda_version}/Chart.yaml | grep '^version:' | head -n 1 | sed 's/version: //')"
            echo "${camunda_version} ${chart_version} ${chart_previous_helm_version}" >> matrix_versions.txt;
          fi
        done

        matrix="$(cat matrix_versions.txt | jq --slurp --compact-output --raw-input '[ split("\n") | .[] | split(" ") | { version: .[0], chartVersion: .[1], previousHelmVersion: .[2] } | select(.version != null)] ')"

        echo "matrix=${matrix}" | tee -a $GITHUB_OUTPUT
