name: Generate chart matrix
description: Find changed charts and generate matrix for changed ones only.
inputs:
  charts-path:
    description: Charts path to match.
    default: "charts/camunda-platform*"
outputs:
  matrix:
    description: JSON matrix of changed charts which will be used as and input for GHA workflow matrix.
    value: ${{ steps.set-chart-versions.outputs.matrix }}
runs:
  using: composite
  steps:
    - name: ℹ️ Print workflow inputs ℹ️
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(inputs) }}
      run: |
        echo "Action Inputs:"
        echo "${GITHUB_CONTEXT}"
    - name: Get changed dirs
      id: changed-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
      with:
        dir_names: "true"
    - name: Generate matrix
      shell: bash
      id: set-chart-versions
      env:
        ALL_MODIFIED_FILES: ${{ steps.changed-files.outputs.all_modified_files }}
      run: |
        echo "Setting matrix based on changed files"
        echo "Changed files:"
        printf "%s\n" ${ALL_MODIFIED_FILES}
        touch matrix_versions.txt
        echo "matrix:" >>matrix_versions.txt

        ls -d ${{ inputs.charts-path }} | while read chart_dir; do
          if [[ $(echo ${ALL_MODIFIED_FILES} | grep "${chart_dir}") ]]; then
            camunda_version="$(basename ${chart_dir} | sed 's/camunda-platform-//')"
            cat >>matrix_versions.txt <<-EOL
          - version: ${camunda_version}
            case: pr
        EOL

            #reads the array from the yaml file
            readarray prScenarios < <(yq e -o=j -I=0 '.integration.scenarios.pr.[]' ${chart_dir}/test/ci-test-config.yaml)

            echo -n "scenarios: \"" | sed 's/^/    /' >>matrix_versions.txt

            for prScenario in "${prScenarios[@]}"; do
              enabled=$(echo "$prScenario" | yq e '.enabled' -)
              # skip if scenario is not enabled
              if [ "$enabled" = "false" ]; then
                continue
              fi
              name=$(echo "$prScenario" | yq e '.name' -)
              # indent name so it complies with yaml formatting
              echo -n "$name," >>matrix_versions.txt
            done
            # replace the "," and the end of the file with '"\n'
            sed -i -e '$s/,$/"\n/' matrix_versions.txt

          fi
        done
        cat matrix_versions.txt

        matrix="$(cat matrix_versions.txt | yq -o=json '.matrix' | jq -c '{ "include": . }' | jq -c 'walk(if type == "number" then tostring else . end)')"
        echo "matrix=${matrix}" | tee -a $GITHUB_OUTPUT
