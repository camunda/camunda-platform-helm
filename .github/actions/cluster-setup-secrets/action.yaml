name: "Cluster Setup - Configure TLS Certificates/Secrets"
description: "Configures TLS certificates/secrets for GKE, ROSA, or EKS clusters."
inputs:
  distro-platform:
    description: "Kubernetes distro platform (gke | rosa | eks)"
    required: true
  chart-path:
    description: "Path to Helm chart"
    required: true
  namespace:
    description: "Target namespace for test secrets"
    required: true
  namespace-prefix:
    description: "Namespace prefix (used only for EKS)"
    required: false
runs:
  using: "composite"
  steps:
    - name: Configure TLS Certificates/Secrets
      shell: bash
      run: |
        set -euo pipefail

        DISTRO_PLATFORM="${{ inputs.distro-platform }}"
        TEST_NAMESPACE="${{ inputs.namespace }}"
        CHART_PATH="${{ inputs.chart-path }}"
        NAMESPACE_PREFIX="${{ inputs.namespace-prefix }}"

        if [[ "$DISTRO_PLATFORM" == "gke" || "$DISTRO_PLATFORM" == "rosa" ]]; then
          echo "🔧 Applying external secret certificates for $DISTRO_PLATFORM"
          kubectl apply -n "$TEST_NAMESPACE" \
            -f .github/config/external-secret/external-secret-certificates.yaml

          # Apply external secret configuration for integration tests
          # Check for chart-specific external secret first (better approach)
          CHART_SPECIFIC_FILE="${CHART_PATH}/test/integration/external-secrets/external-secret-integration-test-credentials.yaml"
          
          if [[ -f "$CHART_SPECIFIC_FILE" ]]; then
            echo "✅ Applying chart-specific external secret for integration tests: $CHART_SPECIFIC_FILE"
            kubectl apply -n "$TEST_NAMESPACE" -f "$CHART_SPECIFIC_FILE"
          else
            echo "⚠️ Chart-specific external secret not found, using fallback"
            # For backward compatibility with other versions (alpha, future versions).
            kubectl apply -n "$TEST_NAMESPACE" \
              -f .github/config/external-secret/external-secret-integration-test-credentials.yaml
          fi

          for secret in $(kubectl get externalsecret -n $TEST_NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
            echo "⏳ Waiting for ExternalSecret: $secret"
            kubectl get externalsecret/"$secret" -n $TEST_NAMESPACE
            kubectl wait --for=condition=Ready externalsecret/"$secret" -n $TEST_NAMESPACE --timeout=300s
          done

        else
          echo "🔧 Running in EKS mode"
          kubectl get secret -n "${NAMESPACE_PREFIX}-certs" aws-camunda-cloud-tls -o yaml > aws-camunda-cloud-tls.yaml
          sed -i "s/namespace: ${NAMESPACE_PREFIX}-certs/namespace: $TEST_NAMESPACE/g" aws-camunda-cloud-tls.yaml
          kubectl apply -f aws-camunda-cloud-tls.yaml -n "$TEST_NAMESPACE"
        fi

        echo "✅ TLS Certificates/Secrets configuration completed."

